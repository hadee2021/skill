[
  {
    "id": 1,
    "headId": "netflix-intro",
    "headHref": "#netflix-intro",
    "headName": "netflix 소개 & 좌표",
    "folder": "NETFLIXPIC",
    "picture": "netflix001소개.png",
    "contentArr": [
      "React로 netflix를 따라 만들엇다<br><br>",
      "컨셉은 해외사이트를 기반으로 잡았다 <br><br>",
      "데이터는 The Movie DataBase를 이용하였다<br><br>",
      "<a href='https://github.com/hadee2021/netflix-redux' target='_blank'> netflix 깃허브</a> <br><br>",
      "<a href='https://hadee-netflix.netlify.app/' target='_blank'> netflix 구현사이트</a> <br><br>"
    ]
  },
  {
    "id": 2,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix002소개.png",
    "contentArr": [
      "메인화면 아래에는 테마별로 추천 영화를 보여준다<br><br>",
      "영화는 캐러셀을 이용하여 구현하였다<br><br>"
    ]
  },
  {
    "id": 3,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix003소개.png",
    "contentArr": [
      "영화 카드에 커서를 올리면<br><br>",
      "영화에 대한 기본적인 정보를 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 4,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix004소개.png",
    "contentArr": [
      "영화 카드를 클릭하면 상세페이지로 넘어간다<br><br>",
      "상세페이지는 영화의 포스터와 평점 리뷰 등이 있다<br><br>"
    ]
  },
  {
    "id": 5,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix005소개.png",
    "contentArr": [
      "트레일러 버튼을 누르면 <br><br>",
      "간단한 트레일러 영상을 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 6,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix006소개.png",
    "contentArr": [
      "리뷰를 누르면 영문버전의 리뷰를 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 7,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix007소개.png",
    "contentArr": [
      "관련 영화도 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 8,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix008소개.png",
    "contentArr": [
      "홈페이지로 돌아가면 정보를 불러오는 동안<br><br>",
      "로딩 UI를 띄어 보여준다<br><br>",
      "메인페이지 상단은 배너 배경화면이기 때문에<br><br>",
      "스켈레톤 대신 로딩 스피너를 사용하였다<br><br>"
    ]
  },
  {
    "id": 9,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix009소개.png",
    "contentArr": [
      "다음은 상단메뉴의 Movies를 클릭하면<br><br>",
      "테마 영화를 분류하여 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 10,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix010소개.png",
    "contentArr": [
      "인기순, 개봉일순, 별점순을<br><br>",
      "오름차순과 내림차순으로 볼 수 있다<br><br>",
      "영화카드는 페이지네이션을 이용하여 구현했다<br><br>"
    ]
  },
  {
    "id": 11,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix011소개.png",
    "contentArr": [
      "검색창에서 영화제목을 검색할 수 있다<br><br>"
    ]
  },
  {
    "id": 12,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix012소개.png",
    "contentArr": [
      "검색한 영화를 볼 수 있다<br><br>",
      "검색한 영화는 종류가 적기 때문에<br><br>",
      "필터 기능을 사용하지 않았다<br><br>"
    ]
  },
  {
    "id": 13,
    "headId": "netflix-logic",
    "headHref": "#netflix-logic",
    "headName": "Code Logic",
    "folder": "NETFLIXPIC",
    "picture": "netflix013파일구조.png",
    "contentArr": [
      "파일구조는 다음과 같다<br><br>",
      "컴포넌트와 페이지<br><br>",
      "여기서는 redux를 적극 활용하였다<br><br>",
      "필요한 부분에서는 recoil도 겸하여 사용함<br><br>"
    ]
  },
  {
    "id": 14,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix014app.png",
    "contentArr": [
      "app.jsx 파일은 router를 구성하였다<br><br>",
      "router외의 다른 요소는 navigation 정도이다<br><br>"
    ]
  },
  {
    "id": 15,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix015nav.png",
    "contentArr": [
      "navigation은 Link를 통해 URL을 변경시켜준다<br><br>"
    ]
  },
  {
    "id": 16,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix016nav.png",
    "contentArr": [
      "navigation에 검색기능을 넣었다<br><br>",
      "input은 양방향 바인딩을 구현하였다<br><br>",
      "value는 값이 없는경우 nullish로 인식할 수 있어서 ' '를 넣었다<br><br>"
    ]
  },
  {
    "id": 17,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix017nav.png",
    "contentArr": [
      "로직1. 검색을 위한 로직만 구현 하였다<br><br>",
      "query는 사용자가 입력한 검색값을 가지게 되고<br><br>",
      "searchMovie 함수는 사용자가 검색 버튼을 눌렀을때<br><br>",
      "query를 붙여서 TMDB에 api요청을 하고<br><br>",
      "받아온 데이터는 전역상태관리 변수안에 넣어주었다<br><br>",
      "페이지를 /search 로 이동시킨다<br><br>",
      "페이지가 이동해도 전역상태변수에서<br><br>",
      "저장해둔 데이터를 가져오면 된다<br><br>",
      "물론 리덕스로 할 수 있지만<br><br>",
      "recoil이 좀더 심플하고 <br><br>",
      "단순한 로직을 위한것이라서 recoil을 사용하였다<br><br>"
    ]
  },
  {
    "id": 18,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix018nav.png",
    "contentArr": [
      "이렇게 네비게이션을 구현하였다<br><br>"
    ]
  },
  {
    "id": 19,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix019메인.png",
    "contentArr": [
      "메인홈페이지는 컴포넌트의 return 앞에<br><br>",
      "로딩을 조건문으로 넣었다<br><br>",
      "loading은 데이터를 api로 받아올건데<br><br>",
      "비동기 작업이라 redux thunk에서 구현하였다<br><br>",
      "그래서 loading에 대한 정보도 redux thunk에 있다<br><br>",
      "메인홈페이지는 대문은 영화배너사진<br><br>",
      "하단에는 영화를 테마별로 캐러셀로 보여준다<br><br>"
    ]
  },
  {
    "id": 20,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix020메인.png",
    "contentArr": [
      "로직1. 메인페이지가 Mount될때<br><br>",
      "영화정보를 불러와야한다<br><br>",
      "dispatch를 이용하여 action함수를 호출하자<br><br><br><br>",
      "redux안에서 영화정보를 받아오면<br><br>",
      "useSelector로 데이터를 가져오자<br><br>"
    ]
  },
  {
    "id": 21,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix021메인.png",
    "contentArr": [
      "로직2. action함수에서 비동기 함수를 반환한다<br><br>",
      "영화API 요청을 하고<br><br>",
      "받아온 데이터를 payload로 넘겨준다<br><br><br><br>"
    ]
  },
  {
    "id": 22,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix022메인.png",
    "contentArr": [
      "반환의 형식은 사진과 같다<br><br>"
    ]
  },
  {
    "id": 23,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix023메인.png",
    "contentArr": [
      "reducer에서는 각각의 상태를 관리하고<br><br>",
      "요청에 따라 작업의 행동을 분리하였다<br><br>",
      "GET_MOVIE_REQUEST에서는 loading값을 true로<br><br>",
      "GET_MOVIE__SUCCESS에서는 loading값을 false로<br><br>",
      "데이터를 받아온것을 loading을 통해 감지할 수 있다<br><br>",
      "GET_MOVIE__SUCCESS에서 받은 데이터를 상태변수에 넣어준다<br><br>"
    ]
  },
  {
    "id": 24,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix024메인.png",
    "contentArr": [
      "메인페이지에서 useSelector를 이용하여<br><br>",
      "상태변수들을 가져올 수 있다<br><br>"
    ]
  },
  {
    "id": 25,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix025메인.png",
    "contentArr": [
      "영화카드는 캐러셀을 이용하였다<br><br>",
      "breakpoint는 화면의 너비이고<br><br>",
      "화면의 너비에 따라 보여주는 item수를 정한다<br><br>"
    ]
  },
  {
    "id": 26,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix026메인.png",
    "contentArr": [
      "영화카드를 캐러셀로 감싸주면 끝이다<br><br>"
    ]
  },
  {
    "id": 27,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix027메인.png",
    "contentArr": [
      "영화카드의 로직은 카드를 클릭시<br><br>",
      "상세페이지로 이동을 시키는 것이다<br><br>"
    ]
  },
  {
    "id": 28,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix028메인.png",
    "contentArr": [
      "영화카드의 이미지는 배경이미지로 구현하였고<br><br>",
      "그 위에 커서를 올려두면<br><br>",
      "영화의 간단한 정보를 볼 수 있게 하였다<br><br>"
    ]
  },
  {
    "id": 29,
    "headId": "netflix-detail",
    "headHref": "#netflix-detail",
    "headName": "영화 상세페이지",
    "folder": "NETFLIXPIC",
    "picture": "netflix029상세.png",
    "contentArr": [
      "상세페이지는 영화 포스터와 평점 리뷰들이 있다<br><br>",
      "모두다 api요청으로 받아온 데이터로 보여준다<br><br>"
    ]
  },
  {
    "id": 30,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix030상세.png",
    "contentArr": [
      "로직1. 앞서 영화카드를 클릭하면 URL을 바꿔서 이동을 해준다<br><br>",
      "URL에서 변수를 가져와서 변수에 해당하는 데이터를 가져오면 된다<br><br>",
      "이 행위를 id가 변할때마다 해야해서 useEffect를 이용함<br><br>",
      "가져온 데이터는 redux에서 상태변수에 저장을 하기때문에<br><br>",
      "useSelector로 변수 가져오기<br><br><br>",
      "로직2. tab은 하단에서리뷰와 관련영화를 보여주는 tab이다<br><br>",
      "버튼의 확장성을 고려하여 변수값으로 구분하게 로직을 구현했다<br><br>",
      "즉 현재 틀릭한 버튼을 알려주고 저장하는 것이다<br><br><br>",
      "로직3. open은 trailer영상을 Modal로 보여줄것인데<br><br>",
      "Modal을 열어주고 닫아주는 역할을 한다<br><br>"
    ]
  },
  {
    "id": 31,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix031상세.png",
    "contentArr": [
      "영화 포스터와 제목<br><br>",
      "장르는 영화마다 다양해서 배열로 받아와서<br><br>",
      "map으로 구현하였다<br><br>"
    ]
  },
  {
    "id": 32,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix032상세.png",
    "contentArr": [
      "평점은 Mui의 별점컴포넌트를 이용했다<br><br>"
    ]
  },
  {
    "id": 33,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix033상세.png",
    "contentArr": [
      "open 상태변수에 따라 trailer영상 Modal을 보여주게 하였다<br><br>"
    ]
  },
  {
    "id": 34,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix034상세.png",
    "contentArr": [
      "리뷰와 관련영화는 클릭시에 tab에 버튼이름을 넣어서<br><br>",
      "어떤 버튼을 눌렀는지 기억하게 하고<br><br>",
      "해당하는 컴포넌트만 보여주게 하였다<br><br>"
    ]
  },
  {
    "id": 35,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix035상세.png",
    "contentArr": [
      "영화의 정보를 가져오는 것도 api요청이라서<br><br>",
      "redux thunk를 활용하였다<br><br>",
      "middleWare를 거쳐서 dispatch요청을 하게하였다<br><br>"
    ]
  },
  {
    "id": 36,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix036상세.png",
    "contentArr": [
      "반환형식은 일반컴포넌트와 다르다<br><br>",
      "action은 함수를 반환하게 하였기 때문이다<br><br>"
    ]
  },
  {
    "id": 37,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix037상세.png",
    "contentArr": [
      "메인 페이지때와 마찬가지로 데이터들을 넣어준다<br><br>",
      "로직을 분리한 이유는 작동의 타이밍이 다르기 때문이다<br><br>",
      "또한 이번의 요청은 영화 1편의 상세정보이기 때문이다<br><br>"
    ]
  },
  {
    "id": 38,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix038상세.png",
    "contentArr": [
      "trailer 컴포넌트는 유튜브에 video key를 넘겨주어<br><br>",
      "해당 영상을 불러오게 하였다<br><br>"
    ]
  },
  {
    "id": 3801,
    "headId": "netflix-movies",
    "headHref": "#netflix-movies",
    "headName": "Movies 페이지",
    "folder": "NETFLIXPIC",
    "picture": "netflix038영화.png",
    "contentArr": [
      "Movies 페이지는 영화를 다양한 기준으로 분류하여 볼 수 있다<br><br>"
    ]
  },
  {
    "id": 39,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix039영화.png",
    "contentArr": [
      "Movies 페이지와 Search 페이지에서는<br><br>",
      "영화카드를 4개씩 보여준다<br><br>",
      "이 행동이 반복되는 행동이라서<br><br>",
      "FourPaging 컴포넌트로 구현하였다<br><br>",
      "Sort 컴포넌트는 반복되지는 않지만<br><br>",
      "클린코드를 위해 컴포넌트로 구현<br><br>"
    ]
  },
  {
    "id": 40,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix040영화.png",
    "contentArr": [
      "Movies 페이지는 메인페이지의 영화를 보여준다<br><br>",
      "다만 차이는 분류기준으로 영화를 볼 수 있다<br><br>",
      "영화는 같은 데이터이므로 메인에서의 redux를 활용했다<br><br>"
    ]
  },
  {
    "id": 41,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix041영화.png",
    "contentArr": [
      "분류의 로직은 분류기준인 sortKey를 받고<br><br>",
      "내림차순인지 여부의 인자를 받는다<br><br>",
      "기본 로직은 오름차순인데<br><br>",
      "내림차순의 인자가 있다면 reverse를 해준다<br><br>"
    ]
  },
  {
    "id": 42,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix042영화.png",
    "contentArr": [
      "sort호출은 사진처럼 각 메뉴에서 호출하여 사용한다<br><br><br><br><br><br>"
    ]
  },
  {
    "id": 43,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix043영화.png",
    "contentArr": [
      "4개의 영화를 보여주는 컴포넌트에서<br><br>",
      "useEffect는 각 변수가 변할 때 마다 호출이된다<br><br>",
      "참고해야할 변수는 4개이지만<br><br>",
      "나는 감시할 변수를 최대한 줄이고 싶었다<br><br>",
      "왜냐면 그만큼 호출을 여러번 하게 되니까<br><br>",
      "보니까 시작 index와 마지막 index는 서로 세트이다<br><br>",
      "이렇게 세트로 다니는 경우는 한놈만 감시해도된다<br><br>",
      "그래서 시작 index로 감시하게 하였다<br><br><br>",
      "여기서는 가져온 영화를 직접 slice로 나눠서 페이지네이션에 구현했는데<br><br>",
      "원래는 처음부터 데이터를나눠서 요청을하고<br><br>",
      "벡엔드 서버에서 slice를 해줘서 나한테 보내줘야한다<br><br>",
      "다만 아쉽게도 The Movie Databse 사이트는 이게 지원이 안된다<br><br>",
      "그래서 데이터를 요청한다음 여기에서 slice로 나눠주게 되었다<br><br>",
      "다행인것은 서버측에서 영화를 20개정도로 나눠서 보내준다는 점이다<br><br>"
    ]
  },
  {
    "id": 44,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix044영화.png",
    "contentArr": [
      "영화카드 아래에는 페이지네이션이다<br><br>"
    ]
  },
  {
    "id": 45,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix045영화.png",
    "contentArr": [
      "페이지네이션의 로직은 npm pagination의 양식을 준수하였다<br><br>",
      "요점은 현재페이지, 아이템수, 넘어가는 동작<br><br>"
    ]
  },
  {
    "id": 46,
    "headId": "netflix-search",
    "headHref": "#netflix-search",
    "headName": "영화 검색",
    "folder": "NETFLIXPIC",
    "picture": "netflix046검색.png",
    "contentArr": [
      "네비게이션의 검색창에서 영화를 검색할 수 있다<br><br>",
      "해외의 API이지만 한국어 검색이 가능하다<br><br>"
    ]
  },
  {
    "id": 47,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix047검색.png",
    "contentArr": [
      "검색페이지는 내가검색한 영화를 볼 수 있다<br><br>",
      "이미 찾을 영화를 알고 제목으로 검색하는것이기 때문에<br><br>",
      "검색되는 영화의 종류는 적을 수 밖에 없다<br><br>",
      "따라서 분류하는 로직을 여기서는 사용하지 않았다<br><br>"
    ]
  },
  {
    "id": 48,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix048검색.png",
    "contentArr": [
      "사용자가 입력한 값은 query로 감시하기로 했다<br><br>"
    ]
  },
  {
    "id": 49,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix049검색.png",
    "contentArr": [
      "사용자가 입력을 마치면 해당 검색값으로 API 요청을 한다<br><br>"
    ]
  },
  {
    "id": 50,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix050검색.png",
    "contentArr": [
      "검색한 정보는 컴포넌트에 한정하지 않게하기 위해서<br><br>",
      "전역 상태관리인 recoil을 이용하였다<br><br>"
    ]
  },
  {
    "id": 51,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "NETFLIXPIC",
    "picture": "netflix051검색.png",
    "contentArr": [
      "전역 상태변수로 정보를 가져오고<br><br>",
      "4개의 영화를 보여주는 컴포넌트에 넘겨주었다<br><br><br><br>",
      "이상으로 브리핑을 마치겠습니다<br><br>",
      "읽어주셔서 감사합니다<br><br><br><br><br><br><br><br>"
    ]
  }
]