[
  {
    "id": 1,
    "headId": "r-basic",
    "headHref": "#r-basic",
    "headName": "기본소개",
    "folder": "REACTPIC",
    "picture": "react001기본.png",
    "contentArr": [
      "react는 크게 4가지 단원으로 구성되있다<br><br>",
      "기본적으로 함수형 컴포넌트로 구성되있으며<br><br>",
      "함수의 특성상 인자로 데이터를 주고 받을 수 있다<br><br>",
      "훅은 vue의 생명주기를 담당하는 역할을 하는데<br><br>",
      "렌더링의 조절을 통한 구현이 핵심이다<br><br>",
      "생명주기란 컴포넌트가 만들어 지면 <br><br>",
      "브라우저에 나타나고 사라지는 과정인데<br><br>",
      "이러한 과정이 렌더링에 연관되기 때문이다<br><br>"
    ]
  },
  {
    "id": 2,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react002기본.png",
    "contentArr": [
      "다음은 컴포넌트의 구조이다<br><br>",
      "코드작성 요령은 다음과 같다<br><br>",
      "HTML과 JS 영역먼저 만들고 <br><br>",
      "필요한 변수,함수등을 JS 코드, 훅 영역에서 만든다<br><br><br><br>",
      "HTML과 JS영역에서 Vue와 연동되는 기법<br><br>",
      "1) v-model  <br><br>",
      "&lt input  <br><br>",
      "value = { 변수 } <br><br>",
      "onChange = {(e) =&gt 함수(e.target.value)} <br><br>",
      "/&gt <br><br>",
      "value에서 변수로 바인딩하고 <br><br>",
      "onChange 로 변할때마다 양방향 바인딩 효과 <br><br><br>",
      "2) v-for  <br><br>",
      "배열.map((item, index) =&gt &lt 컴포넌트 key={id} /&gt)<br><br>",
      "배열 메서드를 이용해서 콜벡안에 태그를 넣으면 <br><br>",
      "여러개의 태그를 형성할 수 있다<br><br>",
      "더 좋은점은 배열메서드의 다양한 기능을 사용할 수 있다는 것이다 <br><br>",
      "예) filter이면 조건에 해당하는것만 보여지게 할 수 있고 <br><br>",
      "map이면 원하는 조건으로 맵핑하여 보여지게 할 수 있다 <br><br>",
      "컴포넌트에는 고유의 key를  넣어서 서로를 구분할 수 있게 해야한다<br><br>",
      "index를 넣는경우 요소의 변동이 일어나면 <br><br>",
      "컴포넌트에도 변동이 일어나기 때문에 index는 피한다<br><br><br>",
      "3) class 바인딩 => className={ isDone ? 'off' : '' } <br><br>",
      "삼항연산자와 연결해서 사용가능 <br><br><br>",
      "4) 조건에따라 내용 보이게 <br><br>",
      "&lttd&gt { isShow && word.kor } &lt/td&gt  <br><br><br><br>",
      "HTML과 JS영역 일반 기법 <br><br>",
      "1-1) onClick = { 함수명 } 클릭이벤트시에 함수호출함<br><br>",
      "1-2) onClick = { ( ) => 함수명( 인자 ) } <br><br>",
      "인자를 받는 함수 호출방법은 고차함수를 이용한다 <br><br>"
    ]
  },
  {
    "id": 3,
    "headId": "r-hook",
    "headHref": "#r-hook",
    "headName": "훅",
    "folder": "REACTPIC",
    "picture": "react003훅.png",
    "contentArr": [
      "훅을 배우기 앞서 렌더링을 먼저 알고가야한다 <br><br>",
      "렌더링 = UI를 그려주는것이다 <br><br>",
      "따라서 렌더링될때 일어나는 현상들에 초점을 둬야한다<br><br>",
      "렌더링이 되면 <br><br>",
      "컴포넌트 함수가 호출되고 모든 내부 변수가 초기화된다  <br><br>",
      "객체의 경우 참조가 새롭게 초기화된다 <br><br>",
      "참조는 주소인데 객체, 배열, 함수가 주소를 가진다 <br><br>",
      "변수에 함수표현식을넣는경우 <br><br>",
      "함수표현식이 새로 다시 만들어서 할당된다 <br><br>",
      "부모컴포넌트가 렌더링되면 자식도 렌더링 된다 <br><br><br>",
      "훅에서는 렌더링의 조절을 통해<br><br>",
      "데이터를 유연하게 다루는게 포인트이다<br><br>",
      "<a href='https://github.com/hadee2021/react-hook' target='_blank'> hook 깃허브</a> <br><br>",
      "<a href='https://github.com/hadee2021/react-useContext' target='_blank'> useContext 깃허브</a> <br><br>"
    ]
  },
  {
    "id": 4,
    "headId": "r-state",
    "headHref": "#r-state",
    "headName": "1. useState",
    "folder": "REACTPIC",
    "picture": "react004훅.png",
    "contentArr": [
      "state의 상태를 생성하고 업데이트 시킬수 있다 <br><br>",
      "state = 컴포넌트가 가질 수 있는 상태<br><br>",
      "setState = setter 함수이다 <br><br>",
      "오직 setState를 이용해서 state를 변경할 수 있다 <br><br>",
      "useState(초기값)에서 초기값이 무거운 경우<br><br>",
      "콜벡으로 넣을 수 있다<br><br>",
      "최초 렌더링때만 불려지고 그 이후에는 불려지지 않는다<br><br>"
    ]
  },
  {
    "id": 5,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react005훅.png",
    "contentArr": [
      "setState 는 함수 안에서 호출한다 <br><br>",
      "setState는 다음에 바뀔 내용을 담는것이다 <br><br>",
      "예) setTime(time + 1)<br><br>",
      "다음에 time의값이 1이 증가하는내용을 담는것이다<br><br><br>",
      "setState는 이전의 값과 새로운값을 비교해서 차이가 있으면 <br><br>",
      "새로운 값으로 업데이트를 하고 리렌더링을 한다!!!!<br><br>",
      "★즉 useState는 state가 변할 때 렌더링을 일으킨다★ <br><br>"
    ]
  },
  {
    "id": 6,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react006훅.png",
    "contentArr": [
      "다음은 2가지 실습 예제이다<br><br>",
      "1. Update버튼을 누르면 1시간씩 증가<br><br>",
      "2. input에 값을 입력하고 Upload누르면<br><br>",
      "아래에 입력된 값이 출력<br><br>"
    ]
  },
  {
    "id": 7,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react007훅.png",
    "contentArr": [
      "코드에서는 names배열을 map을 이용하여<br><br>",
      "p태그로 맵핑하고 있다<br><br>",
      "key로 index를 사용하는것은 좋지 않으나<br><br>",
      "단순한 배열이기에 위 예제는 사용하였다<br><br>",
      "실제에서는 배열속 객체를 활용하여 고유의 id를 부여하는게 좋다<br><br>"
    ]
  },
  {
    "id": 8,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react008훅.png",
    "contentArr": [
      "처음에는 time에 초기값 1이 들어간다<br><br>",
      "setTime에는 1 + 1이 들어있는 상황<br><br>",
      "handleCkick이 호출될때 setTime이 실행되면서<br><br>",
      "이전의 값 1과 지금의 값 1 + 1이 다름을 보고<br><br>",
      "time을 2로 변경해준다<br><br>",
      "그리고 컴포넌트를 리렌더링 한다<br><br>",
      "리렌더링이후에는 time을 보면 2가 반영되있다<br><br>",
      "★ 즉 변경의 반영은 리렌더링되고 보인다<br><br><br>",
      "여기서 짚고넘어가야 할게있다<br><br>",
      "리렌더링 이전에는 time은 1이다<br><br>",
      "마치 setTime가 마지막에 호출되고 비동기처럼 보이는데<br><br>",
      "리렌더링이 되지 않았기에 변경이 결과가 반영안된것이다<br><br>",
      "리렌더링 이후에 time이 2로 보이는 것이다<br><br>"
    ]
  },
  {
    "id": 9,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react009훅.png",
    "contentArr": [
      "setState호출시 state가 이전의 값과 연관이 있으면 콜벡을 넣을 수 있다<br><br>",
      "setState((prevState) =&gt {return 변경사항})<br><br>",
      "prevState는 이전 state값이다<br><br>",
      "state를 변경사항으로 수정한다// 콜벡사용은 참고만하자<br><br><br>",
      "State의 변수가 배열이나 객체처럼 주소를 보고 있으면<br><br>",
      "배열이나 객체의 내용이 바껴도<br><br>",
      "주소는 그대로라서 setState가 인지를 못한다<br><br>",
      "얕은복사 [...arr]를 이용해서 새로운 주소로 만들어야 변화인식<br><br>"
    ]
  },
  {
    "id": 10,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react010훅.png",
    "contentArr": [
      "setter에 콜벡을 넣는것보다는<br><br>",
      "직접넣는게 간단하다<br><br>"
    ]
  },
  {
    "id": 11,
    "headId": "r-effect",
    "headHref": "#r-effect",
    "headName": "2. useEffect",
    "folder": "REACTPIC",
    "picture": "react011훅.png",
    "contentArr": [
      "최초1회 = Mount <br><br>",
      "리렌더링 = Update <br><br>",
      "화면에서 사라짐 = Unmount <br><br>",
      "즉 렌더링 시점에서 함수를 사용하는 것이다 <br><br>"
    ]
  },
  {
    "id": 12,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react012훅.png",
    "contentArr": [
      "Update를 누르면 숫자가 증가한다<br><br>",
      "input에 입력하면 실시간으로 보여진다<br><br>"
    ]
  },
  {
    "id": 13,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react013훅.png",
    "contentArr": [
      "name이 변할때 리렌더링이 일어나고<br><br>",
      "렌더링될때마다 useEffect를 호출하면<br><br>",
      "무거운 함수라면 비효율적이다<br><br>",
      "그리고 name과 관련이 없다면<br><br>",
      "굳이 호출할 필요가 없다<br><br>",
      "그래서 useEffect에서 관련된 변수가 변할때만<br><br>",
      "useEffect를 호출하도록 구성하였다<br><br>"
    ]
  },
  {
    "id": 14,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react014훅.png",
    "contentArr": [
      "버튼을 누르면 타이머가 작동한다<br><br>",
      "타이머는 setInterval을 사용하였는데<br><br>",
      "이러한 함수는 종료 후 clear를 해줘야한다<br><br>"
    ]
  },
  {
    "id": 15,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react015훅.png",
    "contentArr": [
      "onClick에서 인자를 받는경우<br><br>",
      "고차함수를 활용하였다<br><br>"
    ]
  },
  {
    "id": 16,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react016훅.png",
    "contentArr": [
      "unmount 될때 타이머를 clear해주었다<br><br>",
      "이것이 clear up이다<br><br>"
    ]
  },
  {
    "id": 17,
    "headId": "r-ref",
    "headHref": "#r-ref",
    "headName": "3. useRef",
    "folder": "REACTPIC",
    "picture": "react017훅.png",
    "contentArr": [
      "State가 변하면 재렌더링<br><br>",
      "-&gt 컴포넌트의 내부 변수도 초기화<br><br>",
      "ref안의 값은 유지된다<br><br><br>",
      "Ref가 변하면 재렌더링X <br><br>",
      "-&gt 컴포넌트의 변수도 유지<br><br>",
      "다른 요인에의해 재렌더링되면<br><br>",
      "그때 변한게 보여진다<br><br>"
    ]
  },
  {
    "id": 18,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react018훅.png",
    "contentArr": [
      "Ref가 변해도 렌더링 되지 않는다<br><br>"
    ]
  },
  {
    "id": 19,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react019훅.png",
    "contentArr": [
      "State가 변해서 리렌더링 될때<br><br>",
      "Ref의 변화가 반영된다<br><br>"
    ]
  },
  {
    "id": 20,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react020훅.png",
    "contentArr": [
      "ref변수.current로 접근한다<br><br>"
    ]
  },
  {
    "id": 21,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react021훅.png",
    "contentArr": [
      "ref와 변수의 공통점과 차이점<br><br>",
      "공통점: 서로 변해도 렌더링되지 않는다<br><br>"
    ]
  },
  {
    "id": 22,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react022훅.png",
    "contentArr": [
      "차이점: 렌더링이 되면 ref는 변화가 반영되고<br><br>",
      "변수는 초기화 된다<br><br>"
    ]
  },
  {
    "id": 23,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react023훅.png",
    "contentArr": [
      "코드는 렌더링 ,Ref, 변수<br><br>",
      "3가지로 작성하였다<br><br>"
    ]
  },
  {
    "id": 24,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react024훅.png",
    "contentArr": [
      "이번에는 렌더링 수를 카운팅하는 예제이다<br><br>",
      "그런데 콘솔에 렌더링수가 3이 되있다??<br><br>"
    ]
  },
  {
    "id": 25,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react025훅.png",
    "contentArr": [
      "이것은 Root에서 React.StrictMode에서 1회실행되고<br><br>",
      "App에서 1회실행되서 그런것이다<br><br>",
      "초기값 1에서 2번이 실행되서 결과가 3이된것이다<br><br>"
    ]
  },
  {
    "id": 26,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react026훅.png",
    "contentArr": [
      "다시 예제로 돌아가면<br><br>",
      "카운팅을 누루면 렌더링 수가 표시된다<br><br>"
    ]
  },
  {
    "id": 27,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react027훅.png",
    "contentArr": [
      "로직은 올려버튼을 누르면 setCount가 실행되고<br><br>",
      "리렌더링이 되면서<br><br>",
      "useEffect가 실행되고<br><br>",
      "렌더링 수도 증가하게 되는것이다<br><br>",
      "또한 ref변수는 unmount되기 전까지는 유지된다<br><br>"
    ]
  },
  {
    "id": 28,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react028훅.png",
    "contentArr": [
      "이번에는 ref로 DOM에 접근하는 방법이다<br><br>",
      "태그에서는 ref속성을 이용해서<br><br>",
      "속성갑에 ref변수를 연결시켜 주면된다<br><br>"
    ]
  },
  {
    "id": 29,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react029훅.png",
    "contentArr": [
      "input태그에서 focus를 주는 예제이다<br><br>"
    ]
  },
  {
    "id": 30,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react030훅.png",
    "contentArr": [
      "최초 렌더링시에 focus 주게하였다<br><br>"
    ]
  },
  {
    "id": 31,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react031훅.png",
    "contentArr": [
      "로그인버튼 누르면 alert창과 입력값 나온다<br><br>"
    ]
  },
  {
    "id": 32,
    "headId": "r-context",
    "headHref": "#r-context",
    "headName": "4. useContext",
    "folder": "REACTPIC",
    "picture": "react032훅.png",
    "contentArr": [
      "vue에서 provide와 비슷하다<br><br>",
      "상위에서 데이터를 넣어주고 필요한 자식에서만 사용하는것<br><br>",
      "상위에서 Context를 이용해서 데이터를 넣어준다<br><br>",
      "Context에서 넣어주는 초기값은 아무것도 전달해주지 않을때의 값이다<br><br>"
    ]
  },
  {
    "id": 33,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react033훅.png",
    "contentArr": [
      "자식에서 데이터가 필요하면 useContext로 데이터를 접근가능<br><br><br>",
      "Context를 사용하면 컴포넌트의 재사용이 어려워질 수 있다<br><br>",
      "왜냐 어떤컴포넌트가 A라는 상위컴포넌트에서 Context로 데이터를<br><br>",
      "Context로 데이터를 받아서 작동할때<br><br>",
      "B라는 상위컴포넌트와 호환이 안될수 있다<br><br>",
      "받아서 작동할때 B라는 상위컴포넌트와 호환이 안될수 있다<br><br>",
      "즉 여러개의 상위컴포넌트에서 하위컴포넌트의 재사용성이 제한된다 <br><br>"
    ]
  },
  {
    "id": 34,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react034훅.png",
    "contentArr": [
      "이번에제는 다크모드 버튼을 누르면<br><br><br>",
      "배경이 검정색이되고 글자가 하얀색이된다<br><br>"
    ]
  },
  {
    "id": 35,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react035훅.png",
    "contentArr": [
      "다크모드를 실행한모습<br><br>",
      "우리는 다크모드의 여부를 변수로 관리하여 보내줄 예정이다<br><br>"
    ]
  },
  {
    "id": 36,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react036훅.png",
    "contentArr": [
      "우선 Context파일을 만든다<br><br>"
    ]
  },
  {
    "id": 37,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react037훅.png",
    "contentArr": [
      "Context파일을 import하고<br><br>",
      "Context이름.Provide로 감싼뒤<br><br>",
      "보내줄 데이터를 담았다<br><br>"
    ]
  },
  {
    "id": 38,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react038훅.png",
    "contentArr": [
      "자식에서 데이터가 필요할때<br><br>",
      "useContext를 이용하여 필요한 정보를 사용한다<br><br>"
    ]
  },
  {
    "id": 39,
    "headId": "r-memo",
    "headHref": "#r-memo",
    "headName": "5. useMemo",
    "folder": "REACTPIC",
    "picture": "react039훅.png",
    "contentArr": [
      "처음에 내부함수(hardNumber)를 실행하여<br><br>",
      "내부함수(hardNumber) 결과값을 저장 <br><br>",
      "hardNumber가 변할때만 내부함수(hardNumber)를 실행 <br><br><br>",
      "1) 동일한 값을 리턴하는 함수를 반복적으로 호출해야 한다면<br><br>",
      "맨처음 값을 메모리에 저장해서 필요할때 메모리에서 가져온다<br><br>",
      "이것이 Cashing 기능!!<br><br>",
      "여기서는 Memoization 이라 한다<br><br>",
      "즉 렌더링이 될때마다 컴포넌트함수를 호출하면<br><br>",
      "내부함수를 실행하지 않고 메모에 저장된 값으로 가져온다<br><br>",
      "다만 메모리에 저장하기 때문에<br><br>",
      "불필요한것까지 저장하면 성능이 안좋아진다<br><br><br>",
      "2) 어떠한 조건이 만족할때만 변수가 초기화될 수 있다<br><br>",
      "만약 조건을 만족시키지 않으면 <br><br>",
      "리렌더링이 일어나더라도 초기화를 시키지 않고<br><br>",
      "이전의 값을 그대로 사용하게 하는것이다<br><br>"
    ]
  },
  {
    "id": 40,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react040훅.png",
    "contentArr": [
      "계산단계가 많은 어려운계산기<br><br>",
      "계산단계가 적은 쉬운계산기<br><br>"
    ]
  },
  {
    "id": 41,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react041훅.png",
    "contentArr": [
      "어려운계산기에는 useMemo를 적용했다<br><br>",
      "쉬운계산이 작동할때 리렌더링이되도<br><br>",
      "어려운계산은 내부함수를 실행하지 않는다<br><br>"
    ]
  },
  {
    "id": 42,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react042훅.png",
    "contentArr": [
      "어려운계산기를 작동한 모습<br><br>",
      "쉬운계산기는 함수식을 넣어놔서<br><br>",
      "리렌더링이되면 내부함수가 작동한다<br><br>"
    ]
  },
  {
    "id": 43,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react043훅.png",
    "contentArr": [
      "어려운계산기는 for문의 단계를 이용해서 구현<br><br>"
      
    ]
  },
  {
    "id": 44,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react044훅.png",
    "contentArr": [
      "input에서 값을 변경시키면 setter를 호출하여<br><br>",
      "리렌더링을 일으키게 하였다<br><br>",
      "리렌더링이 되면 함수식은 주소를 변수에 넣는것이기 때문에<br><br>",
      "주소가 새로 초기화되고 함수가 다시 만들어지는 것이다<br><br>",
      "예제에서 hardSum과 easySum 각각 초기화가 될때 <br><br>",
      "Calculate함수들이 재실행된다<br><br>",
      "하지만 useMemo의 함수는 기존의 값을 가지고 있어서<br><br>",
      "내부함수를 재실행하지않고 기존의 값을 가져온다<br><br>"
    ]
  },
  {
    "id": 45,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react045훅.png",
    "contentArr": [
      "이번에는 input에서 값을 바꿔서 렌더링을 일으켜보는 예제이다<br><br>"
    ]
  },
  {
    "id": 46,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react046훅.png",
    "contentArr": [
      "비행기타자 버튼을 누르면 useEffect호출함<br><br>"
    ]
  },
  {
    "id": 47,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react047훅.png",
    "contentArr": [
      "이번에는 객체에 useMemo를 적용한것이다<br><br>",
      "리렌더링이 일어나면 변수들이 전부 초기화 되고<br><br>",
      "객체의 주소도 새로 초기화 되는데<br><br>",
      "location객체가 그냥 객체처럼 선언되있으면<br><br>",
      "location 객체를 감시하는 useEffect가 객체가 변한걸로 인식한다<br><br>",
      "location 객체에 useMemo를 이용하여 선언하면<br><br>",
      "isKorea가 변하지 않으면 리렌더링되도<br><br>",
      "기존의 값을 그대로 가져와 사용한다<br><br>",
      "useEffect가 객체가 변한걸로 인식하지 않는다<br><br>"
    ]
  },
  {
    "id": 48,
    "headId": "r-callback",
    "headHref": "#r-callback",
    "headName": "6. useCallback",
    "folder": "REACTPIC",
    "picture": "react048훅.png",
    "contentArr": [
      "useCallback은 useMemo의 함수 버전이다<br><br>",
      "useMemo는 반복되는 함수의 값을 캐싱<br><br>",
      "반복되는 함수를 실행을 할지 여부<br><br>",
      "useCallback은 콜벡함수 자체를 캐싱<br><br>",
      "함수자체를 만들지 여부<br><br>"
    ]
  },
  {
    "id": 49,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react049훅.png",
    "contentArr": [
      "이번예제에서는 3가지 요소가 있다<br><br>",
      "1. input값 변경<br><br>",
      "2. true버튼<br><br>",
      "3. Call someFunc 버튼<br><br>"
    ]
  },
  {
    "id": 50,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react050훅.png",
    "contentArr": [
      "1. number가 변하면<br><br>",
      "콘솔에 'someFunction이 새롭게 만들어졌어요' 를 출력<br><br>",
      "2. toggle이 변하면<br><br>",
      "아무일도 일어나지 않는다<br><br>",
      "3. Call someFunc 버튼을 누르면<br><br>",
      "someFunction 함수를 실행<br><br>"
    ]
  },
  {
    "id": 51,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react051훅.png",
    "contentArr": [
      "1.someFunction의 의존성배열속 number가 변하면<br><br>",
      "useCallback안의 함수가 새롭게 만들어지고<br><br>",
      "다시 Memoization 한다<br><br>",
      "someFunction를 감시하는 useEffect가 변화를 인식하고<br><br>",
      "console.log를 실행한다<br><br><br>",
      "2. 반면에 전혀상관없는 toggle이 변하면<br><br>",
      "리렌더링되도 someFunction과 useEffect은 작동 안한다<br><br>",
      "3. someFunction 함수를 실행하여<br><br>",
      "렌더링에서의 함수를 만드는것과<br><br>",
      "함수를 실행하는것은 다른것임을 보여준다 <br><br>",
      "<br><br>",
      "<br><br>"
    ]
  },
  {
    "id": 52,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react052훅.png",
    "contentArr": [
      "이번예제는 input값으로 분홍색 박스의 크기를 조절한다<br><br>",
      "테마버튼으로 부분배경을 변경한다<br><br>"
    ]
  },
  {
    "id": 53,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react053훅.png",
    "contentArr": [
      "input값으로 분홍색 박스의 크기를 조절하였다<br><br>"
    ]
  },
  {
    "id": 54,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react054훅.png",
    "contentArr": [
      "테마버튼을 누르면 배경이 변한다<br><br>"
    ]
  },
  {
    "id": 55,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react055훅.png",
    "contentArr": [
      "로직은 간단하다<br><br>",
      "input에서 값을 변경하면 setSize를 호출하고<br><br>",
      "리렌더링을 일으킨다<br><br>",
      "size가 변한것을 useCallback이 인식하여<br><br>",
      "리렌더링때 콜벡함수를 새로 만든다<br><br>"
    ]
  },
  {
    "id": 56,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react056훅.png",
    "contentArr": [
      "Box에서는 Props가 변하면<br><br>",
      "useEffect를 실행하여<br><br>",
      "최종적으로 style을 바꿔준다<br><br>"
    ]
  },
  {
    "id": 57,
    "headId": "r-reducer",
    "headHref": "#r-reducer",
    "headName": "7. useReducer",
    "folder": "REACTPIC",
    "picture": "react057훅.png",
    "contentArr": [
      "useReducer는 상태관리를 한다<br><br>"
    ]
  },
  {
    "id": 58,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react058훅.png",
    "contentArr": [
      "useReducer사용 흐름<br><br>"
    ]
  },
  {
    "id": 59,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react059훅.png",
    "contentArr": [
      "useReducer기하적 구조<br><br>"
    ]
  },
  {
    "id": 60,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react060훅.png",
    "contentArr": [
      "예제는 은행에 예금 출금을 하는것이다<br><br>"
    ]
  },
  {
    "id": 61,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react061훅.png",
    "contentArr": [
      "7000원 입금시 잔고는 7000원으로 저장된다<br><br>"
    ]
  },
  {
    "id": 62,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react062훅.png",
    "contentArr": [
      "2000원 출금시 잔고는 5000원으로 저장된다<br><br>"
    ]
  },
  {
    "id": 63,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react063훅.png",
    "contentArr": [
      "reduce함수는 요청에 따라 state를 업데이트한다<br><br>",
      "요청이 다양하여 switch case문을 사용함<br><br>"
    ]
  },
  {
    "id": 64,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react064훅.png",
    "contentArr": [
      "useReducer에서 money를 상태관리한다<br><br>",
      "이벤트가 발생할 때 dispatch를 호출하여 요청 전달<br><br>"
    ]
  },
  {
    "id": 65,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react065훅.png",
    "contentArr": [
      "이번에는 출석부 예제이다<br><br>"
    ]
  },
  {
    "id": 66,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react066훅.png",
    "contentArr": [
      "input에 학생을 입력하면 리스트에 추가된다<br><br>",
      "총 학생 수가 카운트된다<br><br>"
    ]
  },
  {
    "id": 67,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react067훅.png",
    "contentArr": [
      "삭제를 하면 리스트에서 제외되고<br><br>",
      "학생이름을 클릭하면 취소선이 그어진다<br><br>"
    ]
  },
  {
    "id": 68,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react068훅.png",
    "contentArr": [
      "초기값을 객체로 주었다<br><br>"
    ]
  },
  {
    "id": 69,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react069훅.png",
    "contentArr": [
      "추가시 dispatch로 요청을하고<br><br>",
      "초기값의 students키 값인 배열의 요소를<br><br>",
      "Student 컴포넌트에 내려주고 있다<br><br>"
    ]
  },
  {
    "id": 70,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react070훅.png",
    "contentArr": [
      "reducer는 3가지를 처리한다<br><br>",
      "추가 // 삭제 // 취소선 <br><br>"
    ]
  },
  {
    "id": 71,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react071훅.png",
    "contentArr": [
      "자식에서도 dispatch로 요청을 할 수 있다<br><br>"
    ]
  },
  {
    "id": 72,
    "headId": "r-react-memo",
    "headHref": "#r-react-memo",
    "headName": "8. React.Memo",
    "folder": "REACTPIC",
    "picture": "react072훅.png",
    "contentArr": [
      "새로운 컴포넌트는 렌더링이 되어야할 상황에서<br><br>",
      "오직 Prop Check를 통해서<br><br>",
      "자신이 받는 Prop에 변화 여부를 확인한다<br><br>",
      "변화가 없으면 렌더링하지 않고 기존의 값을 가져온다<br><br>"
    ]
  },
  {
    "id": 73,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react073훅.png",
    "contentArr": [
      "각각의 state를 변화시키면서 리렌더링을 일으켜본다<br><br>"
    ]
  },
  {
    "id": 74,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react074훅.png",
    "contentArr": [
      "부모를 리렌더링할때 자식도 초기화되야 하지만<br><br>",
      "자식은 memo로 감싸고 props로 넘겨주는 변수에 변화가 없다<br><br>",
      "따라서 부모만 리렌더링이 일어난다<br><br>"
    ]
  },
  {
    "id": 75,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react075훅.png",
    "contentArr": [
      "반면 자식을 리렌더링하면<br><br>",
      "부모컴포넌트에서 자식의 state가 변해서 부모가 리렌더링된다<br><br>"
    ]
  },
  {
    "id": 76,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react076훅.png",
    "contentArr": [
      "부모는 parentAge와 ChildAge를 가진다<br><br>",
      "둘다 useState를 사용하여 하나만 변해도 부모는 리렌더링됨<br><br>",
      "parentAge 변하면 부모 리렌더링, 자식은 변화가 없다<br><br>",
      "왜냐, 자식에게 props로  ChildAge를 넘겨주는데<br><br>",
      "ChildAge는 그대로이기 때문이다<br><br>",
      "ChildAge 변하면 부모에 state가 있기 때문에<br><br>",
      "부모는 리렌더링된다<br><br>",
      "자식은 ChildAge를  props로 전달받기 때문에<br><br>",
      "자식도 리렌더링 된다<br><br>"
    ]
  },
  {
    "id": 77,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react077훅.png",
    "contentArr": [
      "자식은 export 부분에 memo를 호출하여 새로운 컴포넌트가 된다<br><br>"
    ]
  },
  {
    "id": 78,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react078훅.png",
    "contentArr": [
      "이번에는 부모에서만 리렌더링을 일으키게 해본다<br><br>"
    ]
  },
  {
    "id": 79,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react079훅.png",
    "contentArr": [
      "부모만 리렌더링<br><br>"
    ]
  },
  {
    "id": 80,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react080훅.png",
    "contentArr": [
      "부모에서 props로 넘겨주는 name은 객체이다<br><br>",
      "객체는 리렌더링되면 초기화 되고 주소가 바뀐다<br><br>",
      "그래서 객체에 useMemo과 빈배열을 사용하여<br><br>",
      "처음만 객체를 호출하게 하고 이후에는 기존값을 유지하게 하였다<br><br>",
      "결과적으로 props로 넘겨주는 name은 변하지 않는다<br><br>",
      "부모가 리렌더링되도 자식은 그대로이다<br><br>"
    ]
  },
  {
    "id": 81,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react081훅.png",
    "contentArr": [
      "자식의 모습<br><br>"
    ]
  },
  {
    "id": 82,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react082훅.png",
    "contentArr": [
      "이번에는 부모에서 텔미함수를 만들고<br><br>",
      "자식으로 props로 텔미함수를 내려주고<br><br>",
      "자식에서 텔미를 호출하게 하였다<br><br>"
    ]
  },
  {
    "id": 83,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react083훅.png",
    "contentArr": [
      "부모에서 리렌더링이 일어나면 함수도 다시만들어지고<br><br>",
      "함수의 주소도 새로 초기화되어<br><br>",
      "Props 텔미 함수도 바껴야한다<br><br>",
      "하지만 여긴 바뀌지 않게하였다<br><br>"
    ]
  },
  {
    "id": 84,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react084훅.png",
    "contentArr": [
      "자식에서 텔미함수를 호출한 것이다<br><br>"
    ]
  },
  {
    "id": 85,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react085훅.png",
    "contentArr": [
      "아까 부모가 리렌더링될때<br><br>",
      "부모에 있던 텔미함수가 다시 만들어지지 않았다<br><br>",
      "그이유는 useCallback과 빈배열을 사용했기 때문이다<br><br>",
      "자식에서는 props로 넘어온 텔미함수가 그대로이기 때문에<br><br>",
      "부모가 리렌더링되도 기존 컴포넌트 유지된것이다<br><br>"
    ]
  },
  {
    "id": 86,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react086훅.png",
    "contentArr": [
      "자식컴포넌트의 모습<br><br><br><br><br><br><br><br><br><br>"
    ]
  },
  {
    "id": "87a1",
    "headId": "r-router",
    "headHref": "#r-router",
    "headName": "라우터",
    "folder": "REACTPIC",
    "picture": "react087a1라우터.png",
    "contentArr": [
      "라우팅이란 사용자가 요청한 URL에 따라 <br><br>",
      "알맞는 페이지를 보여주는 것이다 <br><br>",
      "1st. 사용자가 요청은 Link 태그를 이용하거나<br><br>",
      "navigate를 이용하는 것이다<br><br>",
      "여기서 넣은 경로로 URL을 바꾸는데<br><br>",
      "변수를 이용하는 경우에는 변수의 값을 넣는 행위이다<br><br><br>",
      "1st 다음에 URL이 바뀌면 URL에는 페이지의 정보가 들어있다<br><br><br>",
      "2nd. URL의 페이지 정보나 변수의 값을 가져와서<br><br>",
      "해당 값에 따른 데이터를 보여주는 것이다<br><br>",
      "이 과정이 빠르게 진행되어 사용자가 보기에는 <br><br>",
      "페이지 이동으로 보이는 것이다<br><br>",
      "사실은 single page 이다<br><br>"
    ]
  },
  {
    "id": 87,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react087라우터.png",
    "contentArr": [
      "npm i react-router-dom <br><br><br>",
      "BrowserRouter =  라우터 적용 대상 <br><br>",
      "Routes = Route 묶어주는 역할<br><br>",
      "Route = 해당 url의 페이지<br><br>",
      "Routes의 직속 자식이야함<br><br>",
      "순차적으로 url과 일치하는지 본다<br><br>",
      "<a href='https://github.com/hadee2021/react-router' target='_blank'> router 깃허브</a> <br><br>"
    ]
  },
  {
    "id": 88,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react088라우터.png",
    "contentArr": [
      " Link to='/' 는 url을 /로 바꿔주는 것이다 <br><br>",
      "주소로 이동한다<br><br>",
      "기본소개는 끝이다<br><br>"
    ]
  },
  {
    "id": 89,
    "headId": "r-active-url",
    "headHref": "#r-active-url",
    "headName": "1. 동적 URL",
    "folder": "REACTPIC",
    "picture": "react089라우터.png",
    "contentArr": [
      "1) URL 파라미터<br><br>",
      "주소의 경로에 유동적인 값을 넣는 형태이다 <br><br>",
      "ID 또는 이름을 사용하여 특정 데이터를 조회할 때 사용함<br><br>",
      "URL 파라미터 예시: /profile/velopert<br><br>",
      "velopert는 변수이다<br><br><br><br>",
      "URL 파라미터는<br><br>",
      "1st. &ltRoute path='/profiles/:변수' element={&lt컴포넌트/&gt} /&gt<br><br>",
      "경로에 : 를 사용하여 설정합니다. <br><br>"
    ]
  },
  {
    "id": 90,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react090라우터.png",
    "contentArr": [
      "2nd. &ltLink to='/profiles/velopert'&gt Link에서 변수값을 넣고 이동  <br><br>"
    ]
  },
  {
    "id": 91,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react091라우터.png",
    "contentArr": [
      "주소창의 velopert가 변수의 값이다<br><br>"
    ]
  },
  {
    "id": 92,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react092라우터.png",
    "contentArr": [
      "3rd.  useParams( )로 URL 파라미터를 조회하면<br><br>",
      " {username: 'velopert'} 이렇게 나온다<br><br>",
      " username변수에 velopert 값이 있는것이다<br><br>"
    ]
  },
  {
    "id": 93,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react093라우터.png",
    "contentArr": [
      "data를 정의해놓고<br><br>",
      "url의 변수의 값에 따라서<br><br>",
      "다양한 데이터를 렌더링할 수 있다<br><br>"
    ]
  },
  {
    "id": 94,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react094라우터.png",
    "contentArr": [
      "2) 쿼리스트링<br><br>",
      "URL 파라미터와 달리 Route 컴포넌트를 사용할 때 <br><br>",
      "별도로 설정해야되는 것은 없다.<br><br>"
    ]
  },
  {
    "id": 95,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react095라우터.png",
    "contentArr": [
      "먼저 예제코드에서 useLocation( )을 보자<br><br>",
      "useLocation( )은 location객체를 반환 하는데<br><br>",
      "이 객체는 현재 사용자가 보고있는 페이지의 정보를 지니고 있다<br><br>"
    ]
  },
  {
    "id": 96,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react096라우터.png",
    "contentArr": [
      "예제를 실행한 첫화면<br><br>"
    ]
  },
  {
    "id": 97,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react097라우터.png",
    "contentArr": [
      "location객체를 콘솔에 찍어보았다<br><br>",
      "pathname: 현재 주소의 경로 (쿼리스트링 제외)<br><br>",
      "search: 맨 앞의 ? 문자 포함한 쿼리스트링 값<br><br>",
      "hash: 주소의 # 문자열 뒤의 값<br><br>",
      "state: 페이지로 이동할때 임의로 넣을 수 있는 상태 값<br><br>",
      "key: location 객체의 고유 값이다 초기에는 default 이며 <br><br>",
      "페이지가 변경될 때마다 고유의 값이 생성된다<br><br>"
    ]
  },
  {
    "id": 98,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react098라우터.png",
    "contentArr": [
      "주소창이 http://localhost:3000/about?detail=true&mode=7 일때<br><br>",
      "쿼리스트링 값이 현재 ?detail=true&mode=7 으로 표시되는데<br><br>",
      "여기에서 정보를 얻기 위해서<br><br>",
      "? 를 지우고, & 문자열로 분리한뒤<br><br>",
      "key 와 value 를 파싱하는 작업을 해야 한다<br><br><br>",
      "useSearchParams( ) 훅을 이용하면 <br><br>",
      "쿼리스트링을 더욱 쉽게 다룰 수 있다<br><br>"
    ]
  },
  {
    "id": 99,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react099라우터.png",
    "contentArr": [
      "location객체를 콘솔에 찍어보았다<br><br>",
      "아까와는 다르게 정보들이 들어있다<br><br>"
    ]
  },
  {
    "id": 100,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react100라우터.png",
    "contentArr": [
      "1. searchParams는 쿼리파라미터를 조회하거나 수정하는<br><br>",
      "메서드들이 담긴 객체를 반환한다<br><br>",
      "get 메서드를 통해 특정 쿼리파라미터를 조회할 수 있다<br><br>",
      "예) searchParams.get('detail') // detail키의 값을 가져온다 <br><br>",
      "set 메서드를 통해 특정 쿼리파라미터를 업데이트 할 수 있다 <br><br>",
      "조회시에 쿼리파라미터가 존재하지 않는다면 null 로 조회된다.<br><br>",
      "쿼리파라미터를 조회할 때 값은 무조건 문자열타입이다<br><br>",
      "즉 문자열로 'true' 반환한다<br><br><br>"
    ]
  },
  {
    "id": 101,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react101라우터.png",
    "contentArr": [
      "2. setSearchParams 는 쿼리파라미터를 객체형태로 <br><br>",
      "업데이트할 수 있는 함수를 반환한다.<br><br>",
      "setSearchParams({ mode, detail: detail === 'true' ? false : true })<br><br>",
      "mode는 그대로 <br><br>",
      "detail의 값은 조건에따라 true false<br><br>"
    ]
  },
  {
    "id": 102,
    "headId": "r-nested-router",
    "headHref": "#r-nested-router",
    "headName": "2. 중첩라우터",
    "folder": "REACTPIC",
    "picture": "react102라우터.png",
    "contentArr": [
      "중첩라우터는 공통된 컴포넌트안에 다른것들을 보여준다<br><br>",
      "Articles 컴포넌트에서 Outlet 컴포넌트를 사용하여<br><br>",
      "children 으로 들어가는 JSX 엘리먼트를 보여주는 역할<br><br>",
      "주소는 /articles/:id 가 된다<br><br>",
      "id만 바뀌면서 다양한 컴포넌트가 라우팅 된다<br><br>"
    ]
  },
  {
    "id": 103,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react103라우터.png",
    "contentArr": [
      "위 사진은 2군데에 나누어 중첩라우팅을 사용했다<br><br>",
      "1. Layout 컴포넌트에서 url에 따라<br><br>",
      "Home, About, Profile 컴포넌트가 Outlet에서 보여진다<br><br>",
      "Outlet은 Layout 컴포넌트안에 있다<br><br>",
      "2. Articles에서 Article을 보여준다<br><br>"
    ]
  },
  {
    "id": 104,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react104라우터.png",
    "contentArr": [
      "Articles안에 Outlet으로 Article을 보여준다<br><br>"
    ]
  },
  {
    "id": 105,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react105라우터.png",
    "contentArr": [
      "Article은 url에서 변수의 값을 가져와서<br><br>",
      "변수값에 따른 데이터로 렌더링 하였다<br><br>"
    ]
  },
  {
    "id": 106,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react106라우터.png",
    "contentArr": [
      "Articles의 첫 화면<br><br>"
    ]
  },
  {
    "id": 107,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react107라우터.png",
    "contentArr": [
      "게시글 1을 클릭하면<br><br>",
      "url이 1이 추가되고<br><br>",
      "url에서의 변수의값이 1임을 이용해 렌더링<br><br>"
    ]
  },
  {
    "id": 108,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react108라우터.png",
    "contentArr": [
      "게시글 3을 클릭하면<br><br>",
      "url이 3으로 변경되고<br><br>",
      "url에서의 변수의값이 3임을 이용해 렌더링<br><br>"
    ]
  },
  {
    "id": 109,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react109라우터.png",
    "contentArr": [
      "이제는 Layout 컴포넌트를 살펴보자<br><br>"
    ]
  },
  {
    "id": 110,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react110라우터.png",
    "contentArr": [
      "부가 기능을 다루려 한다<br><br>",
      "useNavigate( ) 는 다른 페이지로 이동할 수 있는 함수를 반환한다<br><br>",
      "인자가 숫자 타입이라면 앞으로 가거나, 뒤로 간다<br><br>"
    ]
  },
  {
    "id": 111,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react111라우터.png",
    "contentArr": [
      "화면에서 뒤로가기 버튼이다<br><br><br><br><br><br><br><br>"
    ]
  },
  {
    "id": 112,
    "headId": "r-recoil",
    "headHref": "#r-recoil",
    "headName": "Recoil",
    "folder": "REACTPIC",
    "picture": "react112recoil.png",
    "contentArr": [
      "Atom으로 전역 상태관리를 한다<br><br>",
      "redux대비 심플하고 간단하다<br><br>",
      "전역 상태관리를 한다<br><br>",
      "<a href='https://github.com/hadee2021/recoil' target='_blank'> recoil 깃허브</a> <br><br>"
    ]
  },
  {
    "id": 113,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react113recoil.png",
    "contentArr": [
      "1.index.js <br><br>",
      "npm i recoil 설치<br><br>",
      "index.js에서 RecoilRoot컴포넌트로 감싸야한다<br><br>"
    ]
  },
  {
    "id": 114,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react114recoil.png",
    "contentArr": [
      "atom 은 상태의 단위이다<br><br>",
      "atom이 업데이트 되면 해당 atom을 구독하고 있던<br><br>",
      "모든 컴포넌트들의 state가 새로운 값으로 리렌더링된다<br><br>"
    ]
  },
  {
    "id": 115,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react115recoil.png",
    "contentArr": [
      "2. atom.jsx <br><br>",
      "우리가 공부할 것은 atom 과 selector<br><br>",
      "atom은 상태의 단위이고 <br><br>",
      "selector는 상태를 가공해서 사용하는 것이다<br><br>"
    ]
  },
  {
    "id": 116,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react116recoil.png",
    "contentArr": [
      "먼저 atom은 상태관리를 하는 원자이다<br><br>",
      "key는 고유의 키 =&gt 구분의 용도<br><br>",
      "default는 키의 기본값이다<br><br>",
      "변수명Atom이 사용할 변수명<br><br>",
      "즉 countAtom이 1 값을 가지고 있는 상태이다<br><br>"
    ]
  },
  {
    "id": 117,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react117recoil.png",
    "contentArr": [
      "selector는 atom의 상태를 가공하여 새롭게 사용한다<br><br>",
      "key는 고유의 키 =&gt 구분의 용도<br><br>",
      "get 프로퍼티에서 콜벡으로 가공을 정의한다<br><br>",
      "get(countAtom)으로 상태가져와서 count에 담고<br><br>",
      "count를 제곱하여 새로운 값을 반환하였다<br><br>",
      "즉 countSquareAtom은 count제곱 값을 가지고 있는 상태이다<br><br><br>",
      "selector는 get으로 가져온 상태가 변할때 같이 변한다<br><br>",
      "단독으로 수정불가 readonly라고 생각하면 된다<br><br>"
    ]
  },
  {
    "id": 118,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react118recoil.png",
    "contentArr": [
      "3. 사용할곳<br><br>",
      "useState와 비슷하다 <br><br>",
      "count에 countAtom이 초기값으로 들어가고<br><br>",
      "setCount(count + 1)로 count를 변경한다<br><br>",
      "상태가 업데이트되면 리렌더링이 일어난다<br><br><br>",
      "useRecoilState(  ) 의 역할을 반으로나누면<br><br>",
      "useRecoilValue(  ) 과 useSetRecoilState( ) 로 나눌 수 있다<br><br>"
    ]
  },
  {
    "id": 119,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react119recoil.png",
    "contentArr": [
      "전역상태이기 때문에 props없이도 자식에서 사용가능<br><br>"
    ]
  },
  {
    "id": 120,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react120recoil.png",
    "contentArr": [
      "실행한 모습<br><br>",
      "count는 1이다<br><br>",
      "square는 count를 제곱한것이다<br><br>",
      "증가는 count가 1씩 증가<br><br>",
      "증가는 부모 컴포넌트에 있다<br><br>",
      "감소는 count가 1씩 감소<br><br>",
      "감소는 자식컴포넌트에 있다<br><br>"
    ]
  },
  {
    "id": 121,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react121recoil.png",
    "contentArr": [
      "count를 증가시켜 10을 만들면<br><br>",
      "square도 같이 변해서 100을 가진다<br><br>",
      "자식에서도 count를 보고있으니까 10을 가진다<br><br>"
    ]
  },
  {
    "id": 122,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react122recoil.png",
    "contentArr": [
      "자식에서 감소버튼을 눌러보자<br><br>",
      "count를 감소시켜 7을 만들면<br><br>",
      "square도 같이 변해서 49을 가진다<br><br>"
    ]
  },
  {
    "id": 123,
    "headId": "r-hook-levelup",
    "headHref": "#r-hook-levelup",
    "headName": "훅 응용기술",
    "folder": "REACTPIC",
    "picture": "react123응용기술.png",
    "contentArr": [
      "useReducer와 useContext를 사용하면<br><br>",
      "전역 + 상태관리를 할 수 있다<br><br>",
      "이것의 장점은 국소적으로 관리가 수월하다<br><br><br>",
      "포인트1. 별도의 공간에 3가지를 준비한다<br><br>",
      "포인트2. useReducer을 호출하여 Context에 태우기<br><br>",
      "포인트3. 필요한것만 사용처에서 쓰면된다<br><br><br>",
      "요점은 useContext로 전역적으로 이동하게 하고<br><br>",
      "useReducer로 상태를 관리한다<br><br>",
      "<a href='https://github.com/hadee2021/react-hook-applicate' target='_blank'> hook응용 깃허브</a> <br><br>"
    ]
  },
  {
    "id": 124,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react124응용기술.png",
    "contentArr": [
      "전반적인 파일구조<br><br>",
      "reducer 폴더안의 파일이 포인트 1번이다<br><br>"
    ]
  },
  {
    "id": 125,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react125응용기술.png",
    "contentArr": [
      "포인트1번 3가지의 준비과정<br><br>",
      "reducer, 변수초기값<br><br>",
      "Context이름 = createContext( )<br><br>",
      "3가지를 하나의 파일에 만든다<br><br>"
    ]
  },
  {
    "id": 126,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react126응용기술.png",
    "contentArr": [
      "포인트2번 useContext에 useReducer태우기<br><br>",
      "핵심은 useReducer의 반환값 배열을 보낸것이다<br><br>"
    ]
  },
  {
    "id": 127,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react127응용기술.png",
    "contentArr": [
      "포인트3. 받는작업 =&gt 날라온Context에서 반환배열받기<br><br>",
      "const [state, dispatch] = useContext(Context이름)<br><br>",
      "이후는 reducer사용하듯이 state와 dispatch사용<br><br>",
      "reducer로 상태관리<br><br>"
    ]
  },
  {
    "id": 128,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react128응용기술.png",
    "contentArr": [
      "컴포넌트를 의미단위로 정리하여 리펙토링<br><br>",
      "저렇게 의미로 보면 깔끔하고 피드백이 쉽다<br><br><br><br><br><br><br><br>"
    ]
  },
  {
    "id": 129,
    "headId": "r-redux",
    "headHref": "#r-redux",
    "headName": "Redux",
    "folder": "REACTPIC",
    "picture": "react129리덕스.png",
    "contentArr": [
      "redux는 전역으로 상태 관리를 해준다<br><br>",
      "JS 라이브러리이기 때문에 redux 설치후<br><br>",
      "redux react도 설치 해야한다<br><br>",
      "npm install redux react-redux <br><br><br>",
      "1. 기본적인 파일 세팅 과정<br><br>",
      "빨간색 숫자는 초기만 세팅하면된다<br><br>",
      "파란색 숫자는 초기세팅 이후 작업을 추가로 할 파일이다<br><br>",
      "<a href='https://github.com/hadee2021/redux-react' target='_blank'> redux깃허브</a> <br><br>"
    ]
  },
  {
    "id": 130,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react130리덕스.png",
    "contentArr": [
      "index.js 파일은 저렇게 초기세팅을 해준다<br><br>"
    ]
  },
  {
    "id": 131,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react131리덕스.png",
    "contentArr": [
      "store는 reducer와 연결해준다<br><br>",
      "createStore는 구버전만 나와있어서<br><br>",
      "저렇게 가져와서 별칭으로 사용 하였다<br><br>"
    ]
  },
  {
    "id": 132,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react132리덕스.png",
    "contentArr": [
      "reducer파일은 전역 state를 관리하고<br><br>",
      "action에 따른 state 수정 행동이 정리되있다<br><br>",
      "행동은 우리가 정해주는 것이다<br><br>"
    ]
  },
  {
    "id": 133,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react133리덕스.png",
    "contentArr": [
      "1. useSelector(state =&gt state.count)로 상태 가져오기<br><br>",
      "2. const dispatch = useDispatch( )<br><br>",
      "요청하여 상태 바꾸기<br><br>",
      "dispatch({type: 'INCREMENT', payload:{num: 5} })<br><br>"
    ]
  },
  {
    "id": 134,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react134리덕스.png",
    "contentArr": [
      "어디서든지 사용이 가능하다<br><br>"
    ]
  },
  {
    "id": 135,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react135리덕스.png",
    "contentArr": [
      "요청마다 action이 다르게 찍힌다<br><br>"
    ]
  },
  {
    "id": 136,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react136리덕스.png",
    "contentArr": [
      "미들웨어는 중간에서 중개를 하는 역할을 한다<br><br>",
      "리덕스는 동기적인데 무거운 일이나 비동기 같은경우<br><br>",
      "나중에 따로 처리하고 싶은 경우 등<br><br>",
      "미들웨어를 이용하여 따로 처리 가능하다<br><br>",
      "빨간색 숫자는 초기만 세팅을 한다<br><br>",
      "3번은 여러가지 reducer를 한번에 모아주는 역할을 한다<br><br><br><br>",
      "파란색 a, b 는 순서대로 작성을 하게 되는데<br><br>",
      "(순서는 상관없지만 지키는게 이해에 도움이 된다 )<br><br>",
      "action이 미들웨어이다<br><br>",
      "수정 요청을 보낼때 미들웨어를 먼저 거치고 <br><br>",
      "여기에서 dispatch(Action)을 담는다<br><br>",
      "reducer는 앞전과 동일하다<br><br>",
      "앞전과의 차이라면<br><br>",
      "전역상태를 수정하고 싶을 때<br><br>",
      "redux는 컴포넌트에서 dispatch(Action)을 바로 날림<br><br><br>",
      "redux-thunk는 컴포넌트에서 dispatch(CartAction.getCart( )) <br><br>",
      "이렇게 미들웨어를 먼저 불러주고<br><br>",
      "미들웨어에서 dispatch(Action)를 날린다<br><br>",
      "<a href='https://github.com/hadee2021/redux-middleware' target='_blank'> middleware깃허브</a> <br><br>"
    ]
  },
  {
    "id": 137,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react137리덕스.png",
    "contentArr": [
      "index.js 파일은 저렇게 초기세팅을 해준다<br><br>"
    ]
  },
  {
    "id": 138,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react138리덕스.png",
    "contentArr": [
      "store는 rootReducer와 연결해준다<br><br>",
      "rootReducer가 reducer를 모아준다는 index.jsx 파일 이다<br><br>",
      "여기서는 thunk와 middleware도 세팅해준다<br><br>"
    ]
  },
  {
    "id": 139,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react139리덕스.png",
    "contentArr": [
      "reducer는 이렇게 모아주고<br><br>",
      "객체안에 넣어서 키 마다 대응 시켜주었다<br><br>",
      "reducer를 사용하고 싶을 때는 해당 키를 이용하면 된다<br><br>"
    ]
  },
  {
    "id": 140,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react140리덕스.png",
    "contentArr": [
      "미들웨어 부터 보자<br><br>",
      "미들웨어는 함수를 반환한다<br><br>",
      "여기서는 비동기 함수를 정의할 수 있다<br><br>",
      "여기서 리턴하는 함수는 컴포넌트에서 dispatch로 호출하게 된다<br><br>",
      "그리고 dispatch(action)을 여기서 날려준다<br><br>"
    ]
  },
  {
    "id": 141,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react141리덕스.png",
    "contentArr": [
      "미들웨어에서 넘어온 dispatch(action)을<br><br>",
      "reducer에서 처리한다<br><br>",
      "기존 redux랑 동일하다<br><br>"
    ]
  },
  {
    "id": 142,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react142리덕스.png",
    "contentArr": [
      "컴포넌트에서 사용하는 예시이다<br><br>",
      "파란색은 수정을 요청하는 부분이다<br><br>",
      "dispatch(해당 미들웨어) 호출한다<br><br>",
      "빨간색은 상태 가져오기 이다<br><br>",
      "state.reducer키 를 거쳐서 사용<br><br>",
      "<br><br><br><br><br><br><br><br><br>"
    ]
  },
  {
    "id": 143,
    "headId": "r-query",
    "headHref": "#r-query",
    "headName": "Rreact-query",
    "folder": "REACTPIC",
    "picture": "react143쿼리.png",
    "contentArr": [
      "react-query는 질의를 날리는 역할을 한다<br><br>",
      "서버에 요청하는 fetch, axios 같은것을<br><br>",
      "react-query 하나로 할 수 있다<br><br>",
      "가장 좋은점은 쿼리의 data를 캐싱하는점이다<br><br>",
      "같은 data가 필요할때 여러번 요청하지 않아도 된다<br><br>",
      "<a href='https://github.com/hadee2021/react-query' target='_blank'> react-query 코드 깃허브</a> <br><br>"
    ]
  },
  {
    "id": 144,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react144쿼리.png",
    "contentArr": [
      "쿼리를 요청해서 일을 수행하는 과정이다<br><br>",
      "<br><br>",
      "<br><br>",
      "<br><br>"
    ]
  },
  {
    "id": 145,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react145쿼리.png",
    "contentArr": [
      "1. React-Query 준비<br><br>",
      "상위에서 QueryClient를 생성 후 넣어줍니다<br><br>"
    ]
  },
  {
    "id": 146,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react146쿼리.png",
    "contentArr": [
      "먼저 react-query 사용 안한것<br><br>"
    ]
  },
  {
    "id": 147,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react147쿼리.png",
    "contentArr": [
      "axios로 데이터 요청하여 state 변수에 넣어주고<br><br>",
      "데이터를 받기 전 후로 나누어 Loading 여부 판단<br><br>"
    ]
  },
  {
    "id": 148,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react148쿼리.png",
    "contentArr": [
      "2. useQuery로 데이터 요청<br><br>",
      "useQuery는 react의 훅 처럼 생각하면된다<br><br>",
      "1) 의존성 배열안에 state변수를 넣고 변수가 변하면<br><br>",
      "쿼리를 다시 날린다<br><br>",
      "핵심은 query Key를 기준으로 움직인다!!<br><br>",
      "2) 쿼리를 수행할 함수<br><br>",
      "함수가 인수를 받으면 화살표 함수로 표현하여 사용<br><br>",
      "3) 옵션 속성<br><br>",
      "쿼리를 날리는 방식이나 저장 시간 라이프사이클 조정 등 부가기능<br><br>"
    ]
  },
  {
    "id": 149,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react149쿼리.png",
    "contentArr": [
      "useQuery를 사용하여 구성하였다<br><br>",
      "input에는 캐릭터를 추가 할 수 있다 <br><br>",
      "refetch 버튼은 패치를 재실행한다<br><br>",
      "쿼리를 날렸어도 fresh한 상태이면 우리 코드는 반영이 되지않음<br><br>",
      "따라서 다시 패치를 해줘야해서 버튼은 달게 되었다<br><br>"
    ]
  },
  {
    "id": 150,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react150쿼리.png",
    "contentArr": [
      "useQuery의 흐름을 적어보면 <br><br>",
      "쿼리키에는 의존성 배열의 형태로 넣어준다<br><br>",
      "일반 string이면 상수키로 생각하면 된다<br><br>",
      "쿼리함수의 반환값이 data이다<br><br>",
      "옵션에는 라이프 사이클의 지연시간과 성공시 호출 콜벡을 넣었다<br><br><br><br>",
      "useQuery를 구조분해 할당하면 여러가지 상태 변수를 가져올 수 있다<br><br>",
      "isLoading으로 로딩중 여부<br><br>",
      "refetch 는 다시 패치를 시키는 함수이다<br><br>",
      "쿼리를 업데이트하였을 때 코드상에서 모르는 경우 사용함<br><br>"
    ]
  },
  {
    "id": 151,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react151쿼리.png",
    "contentArr": [
      "useMutation은 데이터 수정의 메서드이다<br><br>",
      "사용법은 콜벡함수를 정의해주고 호출시 넣어주면 된다<br><br>"
    ]
  },
  {
    "id": 152,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react152쿼리.png",
    "contentArr": [
      "html 코드에서 data는 useQuery로 받아온 것이다<br><br>",
      "사진처럼 바로 사용할 수 있어서 직관적이다<br><br>"
    ]
  },
  {
    "id": 153,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react153쿼리.png",
    "contentArr": [
      "리액트의 커스텀 훅 처럼<br><br>",
      "리액트 쿼이로 커스텀 훅을 사용 할 수 있다<br><br>",
      "쿼리의 요청은 반복적이고 어디서나 사용할 수 있으므로<br><br>",
      "커스텀 훅으로 정의하여 사용할 수 있다<br><br>"
    ]
  },
  {
    "id": 154,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react154쿼리.png",
    "contentArr": [
      "커스텀 훅을 불러와서 사용하는 모습<br><br>",
      "useQuery를 기준으로 export 한 것이므로<br><br>",
      "바로 상태변수를 구조분해 할당 하였다<br><br>"
    ]
  },
  {
    "id": 155,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react155쿼리.png",
    "contentArr": [
      "다음은 parallel이다<br><br>",
      "useQuery를 다중으로 요청하는 것이다<br><br>"
    ]
  },
  {
    "id": 156,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react156쿼리.png",
    "contentArr": [
      "다중으로 요청가능하고<br><br>",
      "상태변수를 구조분해할당시에 같은 data 속성이기 때문에<br><br>",
      "중복 방지 차원에서 : 으로 변수명을 정의한다<br><br>"
    ]
  },
  {
    "id": 157,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react157쿼리.png",
    "contentArr": [
      "이번에는 다중요청을 순서대로 해보자<br><br>"
    ]
  },
  {
    "id": 158,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react158쿼리.png",
    "contentArr": [
      "부모에서 Props로 배열 [1, 3]을 넘겨주었다<br><br>"
    ]
  },
  {
    "id": 159,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react159쿼리.png",
    "contentArr": [
      "받은 배열로 먼저 map으로 배열을 새로 만들었다<br><br>",
      "히어로맵 배열은 id 1 과 3 이 순서대로 있다<br><br>",
      "이걸 useQueries에 넣어주면 순차적으로 요청을 한다<br><br>"
    ]
  },
  {
    "id": 160,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react160쿼리.png",
    "contentArr": [
      "마지막으로 페이지네이션을 구현해봤다<br><br>",
      "8개의 요소를 기반으로 한 페이지당 2개만 보여주게 하였다<br><br>",
      "버튼을 눟러 페이지를 이동하고<br><br>",
      "이동시 로딩중을 보여주는 로직이다<br><br>"
    ]
  },
  {
    "id": 161,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react161쿼리.png",
    "contentArr": [
      "옵션에서 이전 데이터 유지를 true로 하면<br><br>",
      "로딩중에서 이전의 데이터를 유지해준다<br><br>",
      "로딩이후에는 새로운 데이터를 바로 보여준다<br><br>",
      "그럼 이 옵션을 사용할 때 로딩중인것은 어떻게 구분할까??<br><br>",
      "isFetching을 사용하면 알 수 있다<br><br>"
    ]
  },
  {
    "id": 162,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react162쿼리.png",
    "contentArr": [
      "isFetching이 true이면 로딩중이다<br><br>",
      "로딩중에는 아래에 h2의 내용을 보여준다<br><br>",
      "<br><br><br><br><br><br><br><br>"
    ]
  }
]