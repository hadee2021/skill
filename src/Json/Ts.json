[
  {
    "id": 1,
    "headId": "ts-basic",
    "headHref": "#ts-basic",
    "headName": "ts 기본타입",
    "folder": "TSPIC",
    "picture": "ts001기본타입.png",
    "contentArr": [
      "타입은 크게 2가지가 있다<br><br>",
      "1. 자료형 타입<br><br>",
      "2. 내가 직접 정해준 타입<br><br>",
      "위의 사진은 자료형타입을 지정한 경우이다<br><br>",
      "변수 선언시 타입을 지정해준다<br><br>",
      "배열은 구성요소의 타입인 배열로 타입지정<br><br>",
      "예) 숫자배열 -> number[ ]<br><br>",
      "함수는 인수의 타입과 반환의 타입을 지정해준다<br><br>"
    ]
  },
  {
    "id": 2,
    "headId": "ts-interface",
    "headHref": "#ts-interface",
    "headName": "interface",
    "folder": "TSPIC",
    "picture": "ts002인터페이스.png",
    "contentArr": [
      "먼저 type으로 타입별칭을 정할 수 있다<br><br>",
      "타입은 자료형과 직접 정하는 타입이 있다 <br><br>",
      "위에서는 직접 타입을 정한 경우이다<br><br><br>",
      "interface란 객체를 사용하기위한 키의 타입 약속이다<br><br>",
      "좀더 큰의미에서는 하나의 기준을 정해준것이다<br><br>",
      "interface의 키는 객체에서 필수로 사용해야한다<br><br>",
      "?는 필수가 아닌 선택적으로 키를 사용하는것이다<br><br>",
      "grade사용 예시) 1 : 'A' 이런식으로 여러개 사용가능<br><br>"
    ]
  },
  {
    "id": 3,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts003인터페이스.png",
    "contentArr": [
      "객체에 적용한 모습이다<br><br>",
      "객체를 반환하는 함수에도 적용할 수 있다 <br><br>"
    ]
  },
  {
    "id": 4,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts004인터페이스.png",
    "contentArr": [
      "interface로 함수를 정의할 수 있다 <br><br>",
      "함수에 interface를 적용하면 <br><br>",
      "매번 인수와 반환 타입을 지정하지 않아도 된다 <br><br>"
    ]
  },
  {
    "id": 5,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts005인터페이스.png",
    "contentArr": [
      "interface로 클래스를 정의할 수 있다 <br><br>",
      "키는 클래스의 필드와 메서드가 된다 <br><br><br><br>",
      "클래스에 사용할때는 implements를 사용한다 <br><br>",
      "클래스에서는 필드를 선언한 후 생성자에서 필드초기화를 해야한다 <br><br>",
      "생성자의 매개변수는 타입을 필드에 맞쳐주면 된다 <br><br>"
    ]
  },
  {
    "id": 6,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts006인터페이스.png",
    "contentArr": [
      "interface끼리 상속도 가능하다 <br><br>"
    ]
  },
  {
    "id": 7,
    "headId": "ts-enum",
    "headHref": "#ts-enum",
    "headName": "열거형",
    "folder": "TSPIC",
    "picture": "ts007열거형.png",
    "contentArr": [
      "열거형은 그룹이라고 생각하면된다<br><br>",
      "예) 성별 -> 남자, 여자<br><br>",
      "이렇게 그룹안에는 들어갈 수 있는 값이 한정되있다<br><br>",
      "즉 입력이 가능한 값들로 구성한것이 enum이다 <br><br><br><br>",
      "enum은 기본적으로 숫자형이다 각요소에 숫자가 0부터 순차적으로 증가<br><br>",
      "문자를 할당할 수 도 있는데 이후에는 계속 문자를 할당해야한다<br><br><br>",
      "사용방법은 간단하다<br><br>",
      "단순하게 type 별칭을 그룹핑 버전으로 사용한다고 생각하면 된다<br><br>",
      "한번 enum인 Gender와 type별칭인 Personnel을 같이 비교해보자<br><br>",
      "디테일의 차이는 있지만 큰틀에서는 이러이러한 것을 이 타입이라 하겠다 는 약속이다<br><br>"
    ]
  },
  {
    "id": 8,
    "headId": "ts-uni",
    "headHref": "#ts-uni",
    "headName": "유니언타입",
    "folder": "TSPIC",
    "picture": "ts008유니언타입.png",
    "contentArr": [
      "우리는 이미 유니언타입을 알게모르게 사용했다 <br><br>",
      "유니언타입이란 여러가지 타입을 같이 사용할 수 있는것이다 <br><br>",
      "근데 여러가지 타입을 사용하면 생각해봐야할게 있다<br><br>",
      "타입별로 기능 수행을 구분할 필요가 있기때문이다 <br><br>",
      "여기서 바로 타입 좁히기 기법이 나온다<br><br>",
      "여러기법이 있지만 간략히만 소개하겠다 <br><br><br><br>",
      "처음에 타입은 2가지가 있다고 했다 <br><br>",
      "1. 자료형 타입<br><br>",
      "-> typeof를 이용하면 자료형을 알 수 있다 <br><br>",
      "사진처럼 자료형에 따른 타입 좁히기가 가능하다 <br><br><br>",
      "2. 내가 직접 정의한 타입<br><br>",
      "-> 공통 키를 이용하여 값을 다르게 주어서 좁히기가 가능하다<br><br>",
      "예) name: 'A'  name: 'B' 이렇게 값으로 구분하는것이다<br><br>",
      "이건 바로 다음사진에서 소개한다<br><br>"
    ]
  },
  {
    "id": 9,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts009타입좁히기.png",
    "contentArr": [
      "이렇게 name이라는 공통된 키에서 값을 달리하여<br><br>",
      "값에 따라 서로 다른 인터페이스를 사용하게 하였다<br><br>"
    ]
  },
  {
    "id": 10,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts010교차타입.png",
    "contentArr": [
      "교차타입이란 여러개의 interface를 한번에 같이사용하는 것이다<br><br>"
    ]
  },
  {
    "id": 11,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "TSPIC",
    "picture": "ts011함수오버로딩.png",
    "contentArr": [
      "타입에 따라 함수 오버로딩이 가능하다<br><br>",
      "자 이제는 보이는가?? <br><br>",
      "-> 자료형 타입에 따른 타입좁히기를 사용한것이다<br><br>",
      "더 나아가서 예시에서 알 수 있는 사실 하나 <br><br>",
      "타입좁히기의 핵심은 input에서 하는 것이다<br><br>",
      "output은 타입좁히기와는 별개라는 것이다<br><br>"
    ]
  },
  {
    "id": 12,
    "headId": "ts-generic",
    "headHref": "#ts-generic",
    "headName": "제네릭",
    "folder": "TSPIC",
    "picture": "ts012제네릭.png",
    "contentArr": [
      "자 앞선 내용과 연결되는 부분이있다<br><br>",
      "제네릭이란 타입이 무엇인지 모르지만 정해주면 따라간다는것이다<br><br>",
      "제네릭도 결국 input에 관련된 개념이라는 것이다<br><br>"
    ]
  }
]