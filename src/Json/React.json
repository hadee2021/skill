[
  {
    "id": 1,
    "headId": "r-basic",
    "headHref": "#r-basic",
    "headName": "기본소개",
    "folder": "REACTPIC",
    "picture": "react001기본.png",
    "contentArr": [
      "react는 크게 4가지 단원으로 구성되있다<br><br>",
      "기본적으로 함수형 컴포넌트로 구성되있으며<br><br>",
      "함수의 특성상 인자로 데이터를 주고 받을 수 있다<br><br>",
      "훅은 vue의 생명주기를 담당하는 역할을 하는데<br><br>",
      "렌더링의 조절을 통한 구현이 핵심이다<br><br>",
      "생명주기란 컴포넌트가 만들어 지면 <br><br>",
      "브라우저에 나타나고 사라지는 과정인데<br><br>",
      "이러한 과정이 렌더링에 연관되기 때문이다<br><br>"
    ]
  },
  {
    "id": 2,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react002기본.png",
    "contentArr": [
      "다음은 컴포넌트의 구조이다<br><br>",
      "코드작성 요령은 다음과 같다<br><br>",
      "HTML과 JS 영역먼저 만들고 <br><br>",
      "필요한 변수,함수등을 JS 코드, 훅 영역에서 만든다<br><br><br><br>",
      "HTML과 JS영역에서 Vue와 연동되는 기법<br><br>",
      "1) v-model  <br><br>",
      "&lt input  <br><br>",
      "value = { 변수 } <br><br>",
      "onChange = {(e) =&gt 함수(e.target.value)} <br><br>",
      "/&gt <br><br>",
      "value에서 변수로 바인딩하고 <br><br>",
      "onChange 로 변할때마다 양방향 바인딩 효과 <br><br><br>",
      "2) v-for  <br><br>",
      "배열.map((item, index) =&gt &lt 컴포넌트 key={id} /&gt)<br><br>",
      "배열 메서드를 이용해서 콜벡안에 태그를 넣으면 <br><br>",
      "여러개의 태그를 형성할 수 있다<br><br>",
      "더 좋은점은 배열메서드의 다양한 기능을 사용할 수 있다는 것이다 <br><br>",
      "예) filter이면 조건에 해당하는것만 보여지게 할 수 있고 <br><br>",
      "map이면 원하는 조건으로 맵핑하여 보여지게 할 수 있다 <br><br>",
      "컴포넌트에는 고유의 key를  넣어서 서로를 구분할 수 있게 해야한다<br><br>",
      "index를 넣는경우 요소의 변동이 일어나면 <br><br>",
      "컴포넌트에도 변동이 일어나기 때문에 index는 피한다<br><br><br>",
      "3) class 바인딩 => className={ isDone ? 'off' : '' } <br><br>",
      "삼항연산자와 연결해서 사용가능 <br><br><br>",
      "4) 조건에따라 내용 보이게 <br><br>",
      "&lttd&gt { isShow && word.kor } &lt/td&gt  <br><br><br><br>",
      "HTML과 JS영역 일반 기법 <br><br>",
      "1-1) onClick = { 함수명 } 클릭이벤트시에 함수호출함<br><br>",
      "1-2) onClick = { ( ) => 함수명( 인자 ) } <br><br>",
      "인자를 받는 함수 호출방법은 고차함수를 이용한다 <br><br>"
    ]
  },
  {
    "id": 3,
    "headId": "r-hook",
    "headHref": "#r-hook",
    "headName": "훅",
    "folder": "REACTPIC",
    "picture": "react003훅.png",
    "contentArr": [
      "훅을 배우기 앞서 렌더링을 먼저 알고가야한다 <br><br>",
      "렌더링 = UI를 그려주는것이다 <br><br>",
      "따라서 렌더링될때 일어나는 현상들에 초점을 둬야한다<br><br>",
      "렌더링이 되면 <br><br>",
      "컴포넌트 함수가 호출되고 모든 내부 변수가 초기화된다  <br><br>",
      "객체의 경우 참조가 새롭게 초기화된다 <br><br>",
      "참조는 주소인데 객체, 배열, 함수가 주소를 가진다 <br><br>",
      "변수에 함수표현식을넣는경우 <br><br>",
      "함수표현식이 새로 다시 만들어서 할당된다 <br><br>",
      "부모컴포넌트가 렌더링되면 자식도 렌더링 된다 <br><br><br>",
      "훅에서는 렌더링의 조절을 통해<br><br>",
      "데이터를 유연하게 다루는게 포인트이다<br><br>"
    ]
  },
  {
    "id": 4,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react004훅.png",
    "contentArr": [
      "state의 상태를 생성하고 업데이트 시킬수 있다 <br><br>",
      "state = 컴포넌트가 가질 수 있는 상태<br><br>",
      "setState = setter 함수이다 <br><br>",
      "오직 setState를 이용해서 state를 변경할 수 있다 <br><br>",
      "useState(초기값)에서 초기값이 무거운 경우<br><br>",
      "콜벡으로 넣을 수 있다<br><br>",
      "최초 렌더링때만 불려지고 그 이후에는 불려지지 않는다<br><br>"
    ]
  },
  {
    "id": 5,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react005훅.png",
    "contentArr": [
      "setState 는 함수 안에서 호출한다 <br><br>",
      "setState는 다음에 바뀔 내용을 담는것이다 <br><br>",
      "예) setTime(time + 1)<br><br>",
      "다음에 time의값이 1이 증가하는내용을 담는것이다<br><br><br>",
      "setState는 이전의 값과 새로운값을 비교해서 차이가 있으면 <br><br>",
      "새로운 값으로 업데이트를 하고 리렌더링을 한다!!!!<br><br>",
      "★즉 useState는 state가 변할 때 렌더링을 일으킨다★ <br><br>"
    ]
  },
  {
    "id": 6,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react006훅.png",
    "contentArr": [
      "다음은 2가지 실습 예제이다<br><br>",
      "1. Update버튼을 누르면 1시간씩 증가<br><br>",
      "2. input에 값을 입력하고 Upload누르면<br><br>",
      "아래에 입력된 값이 출력<br><br>"
    ]
  },
  {
    "id": 7,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react007훅.png",
    "contentArr": [
      "코드에서는 names배열을 map을 이용하여<br><br>",
      "p태그로 맵핑하고 있다<br><br>",
      "key로 index를 사용하는것은 좋지 않으나<br><br>",
      "단순한 배열이기에 위 예제는 사용하였다<br><br>",
      "실제에서는 배열속 객체를 활용하여 고유의 id를 부여하는게 좋다<br><br>"
    ]
  },
  {
    "id": 8,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react008훅.png",
    "contentArr": [
      "처음에는 time에 초기값 1이 들어간다<br><br>",
      "setTime에는 1 + 1이 들어있는 상황<br><br>",
      "handleCkick이 호출될때 setTime이 실행되면서<br><br>",
      "이전의 값 1과 지금의 값 1 + 1이 다름을 보고<br><br>",
      "time을 2로 변경해준다<br><br>",
      "그리고 컴포넌트를 리렌더링 한다<br><br>",
      "리렌더링이후에는 time을 보면 2가 반영되있다<br><br>",
      "★ 즉 변경의 반영은 리렌더링되고 보인다<br><br><br>",
      "여기서 짚고넘어가야 할게있다<br><br>",
      "리렌더링 이전에는 time은 1이다<br><br>",
      "마치 setTime가 마지막에 호출되고 비동기처럼 보이는데<br><br>",
      "리렌더링이 되지 않았기에 변경이 결과가 반영안된것이다<br><br>",
      "리렌더링 이후에 time이 2로 보이는 것이다<br><br>"
    ]
  },
  {
    "id": 9,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react009훅.png",
    "contentArr": [
      "setState호출시 state가 이전의 값과 연관이 있으면 콜벡을 넣을 수 있다<br><br>",
      "setState((prevState) =&gt {return 변경사항})<br><br>",
      "prevState는 이전 state값이다<br><br>",
      "state를 변경사항으로 수정한다// 콜벡사용은 참고만하자<br><br><br>",
      "State의 변수가 배열이나 객체처럼 주소를 보고 있으면<br><br>",
      "배열이나 객체의 내용이 바껴도<br><br>",
      "주소는 그대로라서 setState가 인지를 못한다<br><br>",
      "얕은복사 [...arr]를 이용해서 새로운 주소로 만들어야 변화인식<br><br>"
    ]
  },
  {
    "id": 10,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react010훅.png",
    "contentArr": [
      "setter에 콜벡을 넣는것보다는<br><br>",
      "직접넣는게 간단하다<br><br>"
    ]
  },
  {
    "id": 11,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react011훅.png",
    "contentArr": [
      "최초1회 = Mount <br><br>",
      "리렌더링 = Update <br><br>",
      "화면에서 사라짐 = Unmount <br><br>",
      "즉 렌더링 시점에서 함수를 사용하는 것이다 <br><br>"
    ]
  },
  {
    "id": 12,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react012훅.png",
    "contentArr": [
      "Update를 누르면 숫자가 증가한다<br><br>",
      "input에 입력하면 실시간으로 보여진다<br><br>"
    ]
  },
  {
    "id": 13,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react013훅.png",
    "contentArr": [
      "name이 변할때 리렌더링이 일어나고<br><br>",
      "렌더링될때마다 useEffect를 호출하면<br><br>",
      "무거운 함수라면 비효율적이다<br><br>",
      "그리고 name과 관련이 없다면<br><br>",
      "굳이 호출할 필요가 없다<br><br>",
      "그래서 useEffect에서 관련된 변수가 변할때만<br><br>",
      "useEffect를 호출하도록 구성하였다<br><br>"
    ]
  },
  {
    "id": 14,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react014훅.png",
    "contentArr": [
      "버튼을 누르면 타이머가 작동한다<br><br>",
      "타이머는 setInterval을 사용하였는데<br><br>",
      "이러한 함수는 종료 후 clear를 해줘야한다<br><br>"
    ]
  },
  {
    "id": 15,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react015훅.png",
    "contentArr": [
      "onClick에서 인자를 받는경우<br><br>",
      "고차함수를 활용하였다<br><br>"
    ]
  },
  {
    "id": 16,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react016훅.png",
    "contentArr": [
      "unmount 될때 타이머를 clear해주었다<br><br>",
      "이것이 clear up이다<br><br>"
    ]
  },
  {
    "id": 17,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react017훅.png",
    "contentArr": [
      "State가 변하면 재렌더링<br><br>",
      "-&gt 컴포넌트의 내부 변수도 초기화<br><br>",
      "ref안의 값은 유지된다<br><br><br>",
      "Ref가 변하면 재렌더링X <br><br>",
      "-&gt 컴포넌트의 변수도 유지<br><br>",
      "다른 요인에의해 재렌더링되면<br><br>",
      "그때 변한게 보여진다<br><br>"
    ]
  },
  {
    "id": 18,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react018훅.png",
    "contentArr": [
      "Ref가 변해도 렌더링 되지 않는다<br><br>"
    ]
  },
  {
    "id": 19,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react019훅.png",
    "contentArr": [
      "State가 변해서 리렌더링 될때<br><br>",
      "Ref의 변화가 반영된다<br><br>"
    ]
  },
  {
    "id": 20,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react020훅.png",
    "contentArr": [
      "ref변수.current로 접근한다<br><br>"
    ]
  },
  {
    "id": 21,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react021훅.png",
    "contentArr": [
      "ref와 변수의 공통점과 차이점<br><br>",
      "공통점: 서로 변해도 렌더링되지 않는다<br><br>"
    ]
  },
  {
    "id": 22,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react022훅.png",
    "contentArr": [
      "차이점: 렌더링이 되면 ref는 변화가 반영되고<br><br>",
      "변수는 초기화 된다<br><br>"
    ]
  },
  {
    "id": 23,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react023훅.png",
    "contentArr": [
      "코드는 렌더링 ,Ref, 변수<br><br>",
      "3가지로 작성하였다<br><br>"
    ]
  },
  {
    "id": 24,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react024훅.png",
    "contentArr": [
      "이번에는 렌더링 수를 카운팅하는 예제이다<br><br>",
      "그런데 콘솔에 렌더링수가 3이 되있다??<br><br>"
    ]
  },
  {
    "id": 25,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react025훅.png",
    "contentArr": [
      "이것은 Root에서 React.StrictMode에서 1회실행되고<br><br>",
      "App에서 1회실행되서 그런것이다<br><br>",
      "초기값 1에서 2번이 실행되서 결과가 3이된것이다<br><br>"
    ]
  },
  {
    "id": 26,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react026훅.png",
    "contentArr": [
      "다시 예제로 돌아가면<br><br>",
      "카운팅을 누루면 렌더링 수가 표시된다<br><br>"
    ]
  },
  {
    "id": 27,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react027훅.png",
    "contentArr": [
      "로직은 올려버튼을 누르면 setCount가 실행되고<br><br>",
      "리렌더링이 되면서<br><br>",
      "useEffect가 실행되고<br><br>",
      "렌더링 수도 증가하게 되는것이다<br><br>",
      "또한 ref변수는 unmount되기 전까지는 유지된다<br><br>"
    ]
  },
  {
    "id": 28,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react028훅.png",
    "contentArr": [
      "이번에는 ref로 DOM에 접근하는 방법이다<br><br>",
      "태그에서는 ref속성을 이용해서<br><br>",
      "속성갑에 ref변수를 연결시켜 주면된다<br><br>"
    ]
  },
  {
    "id": 29,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react029훅.png",
    "contentArr": [
      "input태그에서 focus를 주는 예제이다<br><br>"
    ]
  },
  {
    "id": 30,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react030훅.png",
    "contentArr": [
      "최초 렌더링시에 focus 주게하였다<br><br>"
    ]
  },
  {
    "id": 31,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react031훅.png",
    "contentArr": [
      "로그인버튼 누르면 alert창과 입력값 나온다<br><br>"
    ]
  },
  {
    "id": 32,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react032훅.png",
    "contentArr": [
      "vue에서 provide와 비슷하다<br><br>",
      "상위에서 데이터를 넣어주고 필요한 자식에서만 사용하는것<br><br>",
      "상위에서 Context를 이용해서 데이터를 넣어준다<br><br>",
      "Context에서 넣어주는 초기값은 아무것도 전달해주지 않을때의 값이다<br><br>"
    ]
  },
  {
    "id": 33,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react033훅.png",
    "contentArr": [
      "자식에서 데이터가 필요하면 useContext로 데이터를 접근가능<br><br><br>",
      "Context를 사용하면 컴포넌트의 재사용이 어려워질 수 있다<br><br>",
      "왜냐 어떤컴포넌트가 A라는 상위컴포넌트에서 Context로 데이터를<br><br>",
      "Context로 데이터를 받아서 작동할때<br><br>",
      "B라는 상위컴포넌트와 호환이 안될수 있다<br><br>",
      "받아서 작동할때 B라는 상위컴포넌트와 호환이 안될수 있다<br><br>",
      "즉 여러개의 상위컴포넌트에서 하위컴포넌트의 재사용성이 제한된다 <br><br>"
    ]
  },
  {
    "id": 34,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react034훅.png",
    "contentArr": [
      "이번에제는 다크모드 버튼을 누르면<br><br><br>",
      "배경이 검정색이되고 글자가 하얀색이된다<br><br>"
    ]
  },
  {
    "id": 35,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react035훅.png",
    "contentArr": [
      "다크모드를 실행한모습<br><br>",
      "우리는 다크모드의 여부를 변수로 관리하여 보내줄 예정이다<br><br>"
    ]
  },
  {
    "id": 36,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react036훅.png",
    "contentArr": [
      "우선 Context파일을 만든다<br><br>"
    ]
  },
  {
    "id": 37,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react037훅.png",
    "contentArr": [
      "Context파일을 import하고<br><br>",
      "Context이름.Provide로 감싼뒤<br><br>",
      "보내줄 데이터를 담았다<br><br>"
    ]
  },
  {
    "id": 38,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react038훅.png",
    "contentArr": [
      "자식에서 데이터가 필요할때<br><br>",
      "useContext를 이용하여 필요한 정보를 사용한다<br><br>"
    ]
  },
  {
    "id": 39,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react039훅.png",
    "contentArr": [
      "처음에 내부함수(hardNumber)를 실행하여<br><br>",
      "내부함수(hardNumber) 결과값을 저장 <br><br>",
      "hardNumber가 변할때만 내부함수(hardNumber)를 실행 <br><br><br>",
      "1) 동일한 값을 리턴하는 함수를 반복적으로 호출해야 한다면<br><br>",
      "맨처음 값을 메모리에 저장해서 필요할때 메모리에서 가져온다<br><br>",
      "이것이 Cashing 기능!!<br><br>",
      "여기서는 Memoization 이라 한다<br><br>",
      "즉 렌더링이 될때마다 컴포넌트함수를 호출하면<br><br>",
      "내부함수를 실행하지 않고 메모에 저장된 값으로 가져온다<br><br>",
      "다만 메모리에 저장하기 때문에<br><br>",
      "불필요한것까지 저장하면 성능이 안좋아진다<br><br><br>",
      "2) 어떠한 조건이 만족할때만 변수가 초기화될 수 있다<br><br>",
      "만약 조건을 만족시키지 않으면 <br><br>",
      "리렌더링이 일어나더라도 초기화를 시키지 않고<br><br>",
      "이전의 값을 그대로 사용하게 하는것이다<br><br>"
    ]
  },
  {
    "id": 40,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react040훅.png",
    "contentArr": [
      "계산단계가 많은 어려운계산기<br><br>",
      "계산단계가 적은 쉬운계산기<br><br>"
    ]
  },
  {
    "id": 41,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react041훅.png",
    "contentArr": [
      "어려운계산기에는 useMemo를 적용했다<br><br>",
      "쉬운계산이 작동할때 리렌더링이되도<br><br>",
      "어려운계산은 내부함수를 실행하지 않는다<br><br>"
    ]
  },
  {
    "id": 42,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react042훅.png",
    "contentArr": [
      "어려운계산기를 작동한 모습<br><br>",
      "쉬운계산기는 함수식을 넣어놔서<br><br>",
      "리렌더링이되면 내부함수가 작동한다<br><br>"
    ]
  },
  {
    "id": 43,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react043훅.png",
    "contentArr": [
      "어려운계산기는 for문의 단계를 이용해서 구현<br><br>"
      
    ]
  },
  {
    "id": 44,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react044훅.png",
    "contentArr": [
      "input에서 값을 변경시키면 setter를 호출하여<br><br>",
      "리렌더링을 일으키게 하였다<br><br>",
      "리렌더링이 되면 함수식은 주소를 변수에 넣는것이기 때문에<br><br>",
      "주소가 새로 초기화되고 함수가 다시 만들어지는 것이다<br><br>",
      "예제에서 hardSum과 easySum 각각 초기화가 될때 <br><br>",
      "Calculate함수들이 재실행된다<br><br>",
      "하지만 useMemo의 함수는 기존의 값을 가지고 있어서<br><br>",
      "내부함수를 재실행하지않고 기존의 값을 가져온다<br><br>"
    ]
  },
  {
    "id": 45,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react045훅.png",
    "contentArr": [
      "이번에는 input에서 값을 바꿔서 렌더링을 일으켜보는 예제이다<br><br>"
    ]
  },
  {
    "id": 46,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react046훅.png",
    "contentArr": [
      "비행기타자 버튼을 누르면 useEffect호출함<br><br>"
    ]
  },
  {
    "id": 47,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react047훅.png",
    "contentArr": [
      "이번에는 객체에 useMemo를 적용한것이다<br><br>",
      "리렌더링이 일어나면 변수들이 전부 초기화 되고<br><br>",
      "객체의 주소도 새로 초기화 되는데<br><br>",
      "location객체가 그냥 객체처럼 선언되있으면<br><br>",
      "location 객체를 감시하는 useEffect가 객체가 변한걸로 인식한다<br><br>",
      "location 객체에 useMemo를 이용하여 선언하면<br><br>",
      "isKorea가 변하지 않으면 리렌더링되도<br><br>",
      "기존의 값을 그대로 가져와 사용한다<br><br>",
      "useEffect가 객체가 변한걸로 인식하지 않는다<br><br>"
    ]
  },
  {
    "id": 48,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react048훅.png",
    "contentArr": [
      "useCallback은 useMemo의 함수 버전이다<br><br>",
      "useMemo는 반복되는 함수의 값을 캐싱<br><br>",
      "반복되는 함수를 실행을 할지 여부<br><br>",
      "useCallback은 콜벡함수 자체를 캐싱<br><br>",
      "함수자체를 만들지 여부<br><br>"
    ]
  },
  {
    "id": 49,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react049훅.png",
    "contentArr": [
      "이번예제에서는 3가지 요소가 있다<br><br>",
      "1. input값 변경<br><br>",
      "2. true버튼<br><br>",
      "3. Call someFunc 버튼<br><br>"
    ]
  },
  {
    "id": 50,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react050훅.png",
    "contentArr": [
      "1. number가 변하면<br><br>",
      "콘솔에 'someFunction이 새롭게 만들어졌어요' 를 출력<br><br>",
      "2. toggle이 변하면<br><br>",
      "아무일도 일어나지 않는다<br><br>",
      "3. Call someFunc 버튼을 누르면<br><br>",
      "someFunction 함수를 실행<br><br>"
    ]
  },
  {
    "id": 51,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react051훅.png",
    "contentArr": [
      "1.someFunction의 의존성배열속 number가 변하면<br><br>",
      "useCallback안의 함수가 새롭게 만들어지고<br><br>",
      "다시 Memoization 한다<br><br>",
      "someFunction를 감시하는 useEffect가 변화를 인식하고<br><br>",
      "console.log를 실행한다<br><br><br>",
      "2. 반면에 전혀상관없는 toggle이 변하면<br><br>",
      "리렌더링되도 someFunction과 useEffect은 작동 안한다<br><br>",
      "3. someFunction 함수를 실행하여<br><br>",
      "렌더링에서의 함수를 만드는것과<br><br>",
      "함수를 실행하는것은 다른것임을 보여준다 <br><br>",
      "<br><br>",
      "<br><br>"
    ]
  },
  {
    "id": 52,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react052훅.png",
    "contentArr": [
      "이번예제는 input값으로 분홍색 박스의 크기를 조절한다<br><br>",
      "테마버튼으로 부분배경을 변경한다<br><br>"
    ]
  },
  {
    "id": 53,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react053훅.png",
    "contentArr": [
      "input값으로 분홍색 박스의 크기를 조절하였다<br><br>"
    ]
  },
  {
    "id": 54,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react054훅.png",
    "contentArr": [
      "테마버튼을 누르면 배경이 변한다<br><br>"
    ]
  },
  {
    "id": 55,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react055훅.png",
    "contentArr": [
      "로직은 간단하다<br><br>",
      "input에서 값을 변경하면 setSize를 호출하고<br><br>",
      "리렌더링을 일으킨다<br><br>",
      "size가 변한것을 useCallback이 인식하여<br><br>",
      "리렌더링때 콜벡함수를 새로 만든다<br><br>"
    ]
  },
  {
    "id": 56,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "REACTPIC",
    "picture": "react056훅.png",
    "contentArr": [
      "Box에서는 Props가 변하면<br><br>",
      "useEffect를 실행하여<br><br>",
      "최종적으로 style을 바꿔준다<br><br>"
    ]
  }
]