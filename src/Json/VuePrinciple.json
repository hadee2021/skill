[
  {
    "id": 1,
    "headId": "vue-big-picture",
    "headHref": "#vue-big-picture",
    "headName": "Vue 개관",
    "folder": "VUEPIC",
    "picture": "vue001개관1.png",
    "contentArr": [
      "Vue의 큰그림",
      "Html + Css + Js를 함께 사용가능",
      "-> 컴포넌트 <br> <br>",
      "하나의 컴포넌트 안에서의 관계",
      "컴포넌트와 컴포넌트의 관계 <br> <br>",
      "관계에서 주고 받는것들은??!!",
      "변수, 함수, 컴포넌트 -> 조화롭게 사용!!"
    ]
  },
  {
    "id": 2,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue002개관2.png",
    "contentArr": [
      "전역사용 -> 아무데서나 사용가능",
      "로컬사용 -> 그 곳만 사용가능",
      "기타 알짜배기 기술들"
    ]
  },
  {
    "id": 3,
    "headId": "vue-file-relation",
    "headHref": "#vue-file-relation",
    "headName": "파일관계",
    "folder": "VUEPIC",
    "picture": "vue003파일관계.png",
    "contentArr": [
      "그림에서 확장자가 없는것은 폴더이다 <br> <br>",
      "우리가 화면으로 보는 페이지는 index.html파일이다",
      "main.js에서 vue객체를 생성하고 App.vue를 import하여",
      "index.html에 mount하여 연결한다 <br> <br>",
      "App.vue는 주소에 따라 화면에 보여줄 router태그 와 핵심 컴포넌트들이 있다 <br> <br>",
      "pages라는 폴더에서 router로 보여줄 큰 단위의 페이지를 관리",
      "component폴더에서 각종 컴포넌트를 관리한다 <br> <br>",
      "즉 우리가 보는 화면은 여러단위의 컴포넌트들로 이루어져 있는것이다",
      "어떤 컴포넌트를 별도로 보여주고 싶으면 teleport를하여",
      "따로 보여주는것도 가능하다"
    ]
  },
  {
    "id": 4,
    "headId": "vue-component",
    "headHref": "#vue-component",
    "headName": "컴포넌트",
    "folder": "VUEPIC",
    "picture": "vue004컴포넌트1.png",
    "contentArr": [
      "먼저, 하나의 컴포넌트 내부의 관계성 <br><br>",
      "어떤 상호작용을 하는지 중요하다 <br><br>",
      "변수와 함수 -> 표현식",
      "하위(자식) 컴포넌트 <br><br>",
      "=> 이들을 주고 받으면서 기능을 구현함"
    ]
  },
  {
    "id": 5,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue005컴포넌트2.png",
    "contentArr": [
      "컴포넌트와 컴포넌트와의 관계성 <br><br>",
      "1. 부모와 자식이라면 데이터와 이벤트를 주고 받는다 <br><br>",
      "2. 형제라면 부모가 형제를 모아서 중앙관리 "
    ]
  },
  {
    "id": 6,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue006컴포넌트3.png",
    "contentArr": [
      "컴포넌트는 유연하고 재사용 가능한 틀이다!!",
      "재활용성 -> 컴포넌트를 창틀로 비유하자면 <br><br>",
      "1번 ~ 4번 창틀을 보여주었는데",
      "창틀이 4개가 다 다른창틀이 아니다",
      "창틀은 하나인데 데이터만 다르게 바꿔준것이다 <br><br>",
      "이것이 컴포넌트의 재활용성 이다"
    ]
  },
  {
    "id": 7,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue007컴포넌트4.png",
    "contentArr": [
      "유연성 -> 조건에 따라 다른 모습으로 보여줄 수 있다",
      "조건이라하면 v-if, if문, 삼항연산자,등을 적극 활용하자"
    ]
  },
  {
    "id": 8,
    "headId": "vue-global-local",
    "headHref": "#vue-global-local",
    "headName": "전역, 로컬",
    "folder": "VUEPIC",
    "picture": "vue008전역로컬1.png",
    "contentArr": [
      "기능??? axios, router라든지 외부적인 기술들을 사용하고싶어!!",
      "기술의 소유자로부터 import하여 사용한다 <br><br>",
      "소유자는 기술을 export 하여 내보내고",
      "사용자는 기술을 import 하여 받아와서 사용한다 <br><br>",
      "기술에도 개수에 따라 exoprt와 import의 방식의 차이가 있다 <br><br>",
      "1개 일때는 default로 내보내고 기능이름 하나로 사용하면 된다",
      "여러개 일때는 사용시에 구조분해 할당하여 필요한것만 꺼내서 사용한다"
    ]
  },
  {
    "id": 9,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue009전역로컬2.png",
    "contentArr": [
      "기술을 사용하는 장소가 크게 전역과 로컬로 나뉜다 <br><br>",
      "전역은 main.js에 등록하면 아무데서나 사용가능하다",
      "단, 속도의 저하가 생기게 된다 <br><br>",
      "로컬은 import해서 그 곳에서만 사용한다"
    ]
  },
  {
    "id": 10,
    "headId": "vue-lifecycle",
    "headHref": "#vue-lifecycle",
    "headName": "라이프 사이클",
    "folder": "VUEPIC",
    "picture": "vue010라이프사이클.png",
    "contentArr": [
      "라이프사이클은 컴포넌트나 나타나고 사라지는 과정이다 <br><br>",
      "만들고 -> 올리고 -> 올려진 상태 -> 내린다<br><br>",
      "각 단계의 이전, 이후가 핵심기능이다."
    ]
  },
  {
    "id": 11,
    "headId": "vue-script",
    "headHref": "#vue-script",
    "headName": "script 영역",
    "folder": "VUEPIC",
    "picture": "vue011스크립트영역.png",
    "contentArr": [
      "script는 2개의 영역이 있다 <br><br>",
      "1. import하거나 JS코드를 작성하는 공간",
      "함수정의, 변수정의 등 <br><br>",
      "2. export default 공간",
      "setup,data,등의 vue API를 작성한다",
      "물론, 이들 내부에서도 JS코드를 작성할 수 있다 <br><br>",
      "당연한거지만 1과 2는 서로 연동이 가능하다 <br><br>"
    ]
  },
  {
    "id": 12,
    "headId": "vue-template",
    "headHref": "#vue-template",
    "headName": "template 영역",
    "folder": "VUEPIC",
    "picture": "vue012바인딩1.png",
    "contentArr": [
      "바인딩은 script와 template를 연결하는 것이다 <br><br>",
      "속성에는 변수를 연결하여 사용하고 ",
      "이벤트에는 함수를 연결하여 사용한다 <br><br>",
      "근데, template에서도 변수를 바꾸고 싶다면",
      "당연히 상호작용 할수있는 input태그를 이용하여",
      "value대신 v-model로 양방향 바인딩을 이용하면된다 <br><br>"
    ]
  },
  {
    "id": 13,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue013객체로바인딩.png",
    "contentArr": [
      "class, style 바인딩 -> 직접넣어주거나, boolean값에 따라 다른값",
      "값을 넣어주는방법 => 객체, 배열, 삼항 연산자, 등 <br><br>",
      "1. 객체로 바인딩",
      "class -> 클래스명 : boolean값",
      "style -> 속성명 : 속성값"
    ]
  },
  {
    "id": 14,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue014배열로바인딩.png",
    "contentArr": [
      "2. 배열로 바인딩 -> 여러 class를 묶어서 줄수있다 <br><br>"
    ]
  },
  {
    "id": 15,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue015연산자바인딩.png",
    "contentArr": [
      "3. 삼항연산자 바인딩 -> 조건의 참,거짓으로 다른 스타일을 줄 수 있다 <br><br>"
    ]
  },
  {
    "id": 16,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue016vfor.png",
    "contentArr": [
      "v-for는 요소의 개수만큼 태그를 생성한다",
      "구분의 용도로 :key값을 설정 해야한다 <br><br>"
    ]
  },
  {
    "id": 17,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue017vif.png",
    "contentArr": [
      "v-if는 조건에 따라 태그를 생성하거나 제거한다",
      "v-show는 처음부터 존재하고 display:none속성으로 보이거나 안보이게 한다 <br><br>",
      "boolean값으로 제어를 하는데",
      "값이 존재하면 true라는 성질을 주로 사용한다",
      "단!! 0 , NaN과 같이 값으로 존재해도 false인 경우도 있으니 주의하자!"
    ]
  },
  {
    "id": 18,
    "headId": "vue-optional-api",
    "headHref": "#vue-optional-api",
    "headName": "optional API",
    "folder": "VUEPIC",
    "picture": "vue018변수.png",
    "contentArr": [
      "optional API는 vue2에서 주로 사용하는 기술이다 <br><br>",
      "data() {} 는 변수를 정의하는 곳이다 <br><br>",
      "변수는 객체의 키 : 값 처럼 사용한다",
      "다른 블럭에서 사용할려면 this.변수명으로 사용한다<br><br>"
    ]
  },
  {
    "id": 19,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue019함수.png",
    "contentArr": [
      "methods: { } 는 함수를 정의하는 곳이다<br><br>"
    ]
  },
  {
    "id": 20,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue020컴포넌트.png",
    "contentArr": [
      "components: { } 는 컴포넌트를 가져오는 곳이다 <br><br>",
      "컴포넌트는 template에서 사용한다"
    ]
  },
  {
    "id": 21,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue021computed.png",
    "contentArr": [
      "computed: { } 는 계산식의 reative state를 감시하다가",
      "그 값의 변화가 생기면 바로 계산식을 실행한다 <br><br>",
      "결과값은 변수명에 저장하고",
      "외부에서 변수를 사용할때는 this.변수명의 형태로 사용한다"
    ]
  },
  {
    "id": 22,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue022watch.png",
    "contentArr": [
      "watch: { } 는 감시할 변수를 감시하다가",
      "그 값의 변화가 생기면 바로 계산식을 실행한다 <br><br> "
    ]
  },
  {
    "id": 23,
    "headId": "vue-composition-api",
    "headHref": "#vue-composition-api",
    "headName": "composition API",
    "folder": "VUEPIC",
    "picture": "vue023setup1.png",
    "contentArr": [
      "composition API는 Vue3에서 전형적으로 사용하는 기술이다 <br><br>",
      "우선 필요한 기술들을 구조분해할당 으로  import하여 사용한다 <br><br>",
      "변수는 const로 선언하고 값은 ref 혹은 reactive로 감싼다",
      "반응형으로 감싸면 그 자체가 주소를 나타내기 때문에",
      "변수는 주소를 바라보게 된다 <br><br>",
      "함수는 arrow function 으로 형성한다"
    ]
  },
  {
    "id": 24,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue024setup2.png",
    "contentArr": [
      "reactive state를 감시!!<br><br>",
      "computed는 안에 callback에서 계산식을 감시한다 <br><br>",
      "watch는 변수를 감시하다가 변경시에 callback을 실행함",
      "callback안의 인수인 new, old는 변수의 변화 이후랑 이전의 값이다"
    ]
  },
  {
    "id": 25,
    "headId": "vue-reactive",
    "headHref": "#vue-reactive",
    "headName": "반응성",
    "folder": "VUEPIC",
    "picture": "vue025reactive.png",
    "contentArr": [
      "reactive state -> 변화!! <br><br>",
      "단, 구조분해할당 하면 반응성을 잃어버린다",
      "따라서 toRef로 반응성을 생성해줘야 한다"
    ]
  },
  {
    "id": 26,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue026computed.png",
    "contentArr": [
      "computed는 반응성변수의 변화를 감시하고",
      "계산된 결과값을 기억하는 cashing기능을 가진다 <br><br>",
      "getter전용으로 값을 가져오는데",
      "get() {  } 의 반환값이 계산식의 결과값이다",
      "계산된값은 변경하지 마세요!!",
      "임시 스냅샷 정도로 생각하는것이 무난함"
    ]
  },
  {
    "id": 27,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue027nexttick.png",
    "contentArr": [
      "nextTick은 가장 마지막에 callback을 실행한다 <br><br>",
      "nextTick을 사용하는 이유는 DOM을 업데이트하면",
      "JS의 비동기 때문에 업데이트된 DOM을 찾지못하는 현상이 생기는데",
      "이를 방지하기 위해서 마지막에 DOM을 갱신하게 하는것이 nextTick임"
    ]
  },
  {
    "id": 28,
    "headId": "vue-props-emits",
    "headHref": "#vue-props-emits",
    "headName": "props와 emits",
    "folder": "VUEPIC",
    "picture": "vue028props와emits.png",
    "contentArr": [
      "부모컴포넌트와 자식컴포넌트간의 상호작용!!!<br><br>",
      "부모는 props로 데이터(변수, 함수)를 내려준다",
      "자식은 emits으로 데이터(변수, 함수)를 올린다"
    ]
  },
  {
    "id": 29,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue029emit.png",
    "contentArr": [
      "자식에서 함수를 실행 -> 이벤트발생",
      "-> 부모에게 데이터전달, 이벤트 실행 -> 부모의 함수 실행 <br><br>",
      "emits:['이벤트명'] 으로 이벤트명을 모아주기 <br><br>",
      "자식의 함수안에서 emit정의한다",
      "이 함수가 실행되면 emit도 실행된다 <br><br>",
      "부모에서는 자식컴포넌트의 이벤트를 연결하주고",
      "이벤트발생시 부모에서 실행할 함수를 작성한다"
    ]
  },
  {
    "id": 30,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue030props.png",
    "contentArr": [
      "부모에서 데이터 내려보내면 자식은 자유롭게 사용가능",
      "단, 자식에서 데이터를 변경해서는 안된다 <br><br>",
      "props: { } 안에서 내려받은 데이터 정보를 작성한다"
    ]
  },
  {
    "id": 31,
    "headId": "vue-resfs",
    "headHref": "#vue-resfs",
    "headName": "resfs",
    "folder": "VUEPIC",
    "picture": "vue031resfs.png",
    "contentArr": [
      "$refs.참조명 -> 그 태그에 접근한다 <br><br>",
      "태그에 접근하여 이벤트를 발생시커나 변수를 변경가능"
    ]
  },
  {
    "id": 32,
    "headId": "vue-toRefs",
    "headHref": "#vue-toRefs",
    "headName": "toRefs",
    "folder": "VUEPIC",
    "picture": "vue032torefs.png",
    "contentArr": [
      "script영역에서 바깥에서 함수정의 -> 반환값",
      "setup에서 사용하고 싶으면 반응형을 반환하게 해야함"
    ]
  },
  {
    "id": 33,
    "headId": "vue-extra-js",
    "headHref": "#vue-extra-js",
    "headName": "외부js",
    "folder": "VUEPIC",
    "picture": "vue033외부js.png",
    "contentArr": [
      "외부 js파일 -> 함수를 정의하여 어느 컴포넌트에서 든지",
      "import 하여 사용 할 수 있다 <br><br>",
      "단, 함수의 return값은 반응형으로 감싸줘야 한다"
    ]
  },
  {
    "id": 34,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue034외부js사용.png",
    "contentArr": [
      "사용 할 때는 함수를 import하고 바로 호출식으로 사용가능 <br><br>"
    ]
  },
  {
    "id": 35,
    "headId": "vue-mixin",
    "headHref": "#vue-mixin",
    "headName": "믹스인",
    "folder": "VUEPIC",
    "picture": "vue035믹스인1.png",
    "contentArr": [
      "믹스인은 외부js파일에서 함수를",
      "아까 처럼 개별컴포넌트에서 사용도하고",
      "전역으로도 사용 할 수 있는 기술이다 <br><br>",
      "일반적인 함수와 구분하기 위해서 $함수명으로 정의한다 <br><br>"
    ]
  },
  {
    "id": 36,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue036믹스인2.png",
    "contentArr": [
      "로컬에서 믹스인을 사용하는 방법은",
      "import하고 mixin: [이름], 의 형식으로 가져온다 <br><br>",
      "함수는 this.$함수명으로 사용한다"
    ]
  },
  {
    "id": 37,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue037믹스인3.png",
    "contentArr": [
      "전역으로 사용하기 위해서는 main.js에서",
      "import를 하고 .mixin(이름)의 형식으로 가져온다 <br><br>",
      "함수는 $함수명으로 바로 사용가능하다"
    ]
  },
  {
    "id": 38,
    "headId": "vue-plugin",
    "headHref": "#vue-plugin",
    "headName": "플러그인",
    "folder": "VUEPIC",
    "picture": "vue038플러그인1.png",
    "contentArr": [
      "다국어 처리를 위해서 플러그인을 만들어준다 <br><br>",
      "해당 사진의 코드는 문서에 나타나 있으니 적극활용하자 <br><br>",
      "이 문서를 작성하였으면 전역으로 사용하기위해 main.js에 등록을 해야한다"
    ]
  },
  {
    "id": 39,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue039플러그인2.png",
    "contentArr": [
      "i18nString 객체안에서",
      "언어에 따른 변수명의 값을 다르게 표현 할 수 있다 <br><br>",
      "hi : hello",
      "hi : 안녕 <br><br>",
      ".use() 안에 객체 변수를 담아주고",
      "$translate(\"ko.hi\") 이렇게 사용하면 된다 <br><br>"
    ]
  },
  {
    "id": 40,
    "headId": "vue-vuex",
    "headHref": "#vue-vuex",
    "headName": "vuex",
    "folder": "VUEPIC",
    "picture": "vue040vuex개관.png",
    "contentArr": [
      "vuex는 전역으로 변수의 상태를 관리하는 것이다",
      "이곳 저곳에서 쓰이는 변수는",
      "통일성이 있어야하고 함부로 변경되고 하면 안된다",
      "따라서 vuex에서 변수를 관리하는 것이다 <br><br>",
      "기능은 크게 2가지이다 ",
      "1. 값을 가져오기 -> getter를 이용하여 가져온다 ",
      "2. 값을 수정한다 -> dispatch를 이용한다 "
    ]
  },
  {
    "id": 41,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue041vuex1.png",
    "contentArr": [
      "state에서는 변수를 객체안에서 관리한다 <br><br>",
      "mutation은 오직 state에 접근가능하다",
      "state의 변수값을 바꿀 수 있다"
    ]
  },
  {
    "id": 42,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue042vuex2.png",
    "contentArr": [
      "외부에서 state의 변수값을 바꾸고 싶어서",
      "바꿀 값(payload)을 전달할때 <br><br>",
      "commit을 호출하여 mutation에게 payload를 전달한다 <br><br>",
      "우리가 state의 변수값을 가져오고 싶을 때",
      "getter를 이용하는데",
      "getter는 vuex안의 computed역할을 수행한다"
    ]
  },
  {
    "id": 43,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue043vuex3.png",
    "contentArr": [
      "외부에서 사용하려면 vuex에서 useStore를 import해야한다",
      "useStore를 호출하여 store라는 변수에 저장을 하자 <br><br>",
      "1. 변수를 가져오고 싶으면",
      "computed를 사용하고 getter를 이용해서 가져와야한다 <br><br>",
      "2. 변수를 변경하고 싶으면 dispatch를 활용하면된다",
      "변경할 값들은 payload에 넣어주자"
    ]
  },
  {
    "id": 44,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue044vuexmodules1.png",
    "contentArr": [
      "상태관리를 하나의 변수만 하는것도 아니고",
      "여러변수를 가지고 할테니까",
      "변수별로 그룹화 할 필요가 있다",
      "-> 이것이 모듈화 <br><br>",
      "namespaced를 넣어주면 폴더처럼 사용가능하다 <br><br>"
    ]
  },
  {
    "id": 45,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue045vuexmodules2.png",
    "contentArr": [
      "외부에서 모듈의 변수를 사용하고 싶으면",
      "경로에서 모듈에 접근하여 사용하면 된다"
    ]
  },
  {
    "id": 46,
    "headId": "vue-axios",
    "headHref": "#vue-axios",
    "headName": "axios",
    "folder": "VUEPIC",
    "picture": "vue046axios1.png",
    "contentArr": [
      "axios는 DB에 정보를 요청하는 의사소통 방식이다 <br><br>",
      "핵심기능은 C R U D !!! <br><br>",
      "핵심기능을 method라고 부른다 <br><br>"
    ]
  },
  {
    "id": 47,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue047axios2.png",
    "contentArr": [
      "axios에게 넣어줘야하는 값은",
      "어떤 요청을 보낼것인가 -> method",
      "어디에 요청을 할 것인가 ->url <br><br>",
      "axios를 사용하는 방식에는 그림처럼 2가지 방식이 있다"
    ]
  },
  {
    "id": 48,
    "headId": "vue-slot",
    "headHref": "#vue-slot",
    "headName": "slot",
    "folder": "VUEPIC",
    "picture": "vue048slot.png",
    "contentArr": [
      "slot의 핵심은 틀의 재활용성과",
      "부모마다 다양한 내용을 넣을 수 있는 확장성이다 <br><br>",
      "slot마다 구분을 하기 위해서 name을 설정한다"
    ]
  },
  {
    "id": 49,
    "headId": "vue-router",
    "headHref": "#vue-router",
    "headName": "router",
    "folder": "VUEPIC",
    "picture": "vue049router1.png",
    "contentArr": [
      "해당 주소에 맞는 컴포넌트르 보여준다!!! <br><br>",
      "경로, 이름, 컴포넌트 를 쌍으로 묶어준다"
    ]
  },
  {
    "id": 50,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue050router2.png",
    "contentArr": [
      "main.js에서 router폴더를 import해줘야한다 <br><br>"
    ]
  },
  {
    "id": 51,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue051router3.png",
    "contentArr": [
      "router-view로 해당 컴포넌트를 보여준다 <br><br>"
    ]
  },
  {
    "id": 52,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue052router4.png",
    "contentArr": [
      "1. 태그를 이용한 방법 -> 경로 혹은 name을 써준다 <br><br>",
      "2. 함수에서 이동하는 방법 -> useRouter().push 사용 <br><br>"
    ]
  },
  {
    "id": 53,
    "headId": "",
    "headHref": "",
    "headName": "",
    "folder": "VUEPIC",
    "picture": "vue053router5.png",
    "contentArr": [
      "route에는 router안의 객체의 정보가 있다 <br><br>",
      "앞서, router는 경로, 전달등의 정보가 있다 <br><br><br><br><br><br><br><br>"
    ]
  }
]
